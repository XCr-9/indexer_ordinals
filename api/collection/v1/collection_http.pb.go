// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.17.3
// source: collection/v1/collection.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCollectionGetCollection = "/api.collection.v1.Collection/GetCollection"
const OperationCollectionListCollections = "/api.collection.v1.Collection/ListCollections"

type CollectionHTTPServer interface {
	GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionReply, error)
	ListCollections(context.Context, *ListCollectionRequest) (*ListCollectionReply, error)
}

func RegisterCollectionHTTPServer(s *http.Server, srv CollectionHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/collections/{tick}", _Collection_GetCollection0_HTTP_Handler(srv))
	r.GET("/v1/collections", _Collection_ListCollections0_HTTP_Handler(srv))
}

func _Collection_GetCollection0_HTTP_Handler(srv CollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCollectionGetCollection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollection(ctx, req.(*GetCollectionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectionReply)
		return ctx.Result(200, reply)
	}
}

func _Collection_ListCollections0_HTTP_Handler(srv CollectionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCollectionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCollectionListCollections)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCollections(ctx, req.(*ListCollectionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCollectionReply)
		return ctx.Result(200, reply)
	}
}

type CollectionHTTPClient interface {
	GetCollection(ctx context.Context, req *GetCollectionRequest, opts ...http.CallOption) (rsp *GetCollectionReply, err error)
	ListCollections(ctx context.Context, req *ListCollectionRequest, opts ...http.CallOption) (rsp *ListCollectionReply, err error)
}

type CollectionHTTPClientImpl struct {
	cc *http.Client
}

func NewCollectionHTTPClient(client *http.Client) CollectionHTTPClient {
	return &CollectionHTTPClientImpl{client}
}

func (c *CollectionHTTPClientImpl) GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...http.CallOption) (*GetCollectionReply, error) {
	var out GetCollectionReply
	pattern := "/v1/collections/{tick}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCollectionGetCollection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CollectionHTTPClientImpl) ListCollections(ctx context.Context, in *ListCollectionRequest, opts ...http.CallOption) (*ListCollectionReply, error) {
	var out ListCollectionReply
	pattern := "/v1/collections"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCollectionListCollections))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
