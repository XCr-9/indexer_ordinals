// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: inscription/v1/inscription.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Inscription_GetInscription_FullMethodName  = "/api.inscription.v1.Inscription/GetInscription"
	Inscription_ListInscription_FullMethodName = "/api.inscription.v1.Inscription/ListInscription"
)

// InscriptionClient is the client API for Inscription service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InscriptionClient interface {
	GetInscription(ctx context.Context, in *GetInscriptionRequest, opts ...grpc.CallOption) (*GetInscriptionReply, error)
	ListInscription(ctx context.Context, in *ListInscriptionRequest, opts ...grpc.CallOption) (*ListInscriptionReply, error)
}

type inscriptionClient struct {
	cc grpc.ClientConnInterface
}

func NewInscriptionClient(cc grpc.ClientConnInterface) InscriptionClient {
	return &inscriptionClient{cc}
}

func (c *inscriptionClient) GetInscription(ctx context.Context, in *GetInscriptionRequest, opts ...grpc.CallOption) (*GetInscriptionReply, error) {
	out := new(GetInscriptionReply)
	err := c.cc.Invoke(ctx, Inscription_GetInscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inscriptionClient) ListInscription(ctx context.Context, in *ListInscriptionRequest, opts ...grpc.CallOption) (*ListInscriptionReply, error) {
	out := new(ListInscriptionReply)
	err := c.cc.Invoke(ctx, Inscription_ListInscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InscriptionServer is the server API for Inscription service.
// All implementations must embed UnimplementedInscriptionServer
// for forward compatibility
type InscriptionServer interface {
	GetInscription(context.Context, *GetInscriptionRequest) (*GetInscriptionReply, error)
	ListInscription(context.Context, *ListInscriptionRequest) (*ListInscriptionReply, error)
	mustEmbedUnimplementedInscriptionServer()
}

// UnimplementedInscriptionServer must be embedded to have forward compatible implementations.
type UnimplementedInscriptionServer struct {
}

func (UnimplementedInscriptionServer) GetInscription(context.Context, *GetInscriptionRequest) (*GetInscriptionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInscription not implemented")
}
func (UnimplementedInscriptionServer) ListInscription(context.Context, *ListInscriptionRequest) (*ListInscriptionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInscription not implemented")
}
func (UnimplementedInscriptionServer) mustEmbedUnimplementedInscriptionServer() {}

// UnsafeInscriptionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InscriptionServer will
// result in compilation errors.
type UnsafeInscriptionServer interface {
	mustEmbedUnimplementedInscriptionServer()
}

func RegisterInscriptionServer(s grpc.ServiceRegistrar, srv InscriptionServer) {
	s.RegisterService(&Inscription_ServiceDesc, srv)
}

func _Inscription_GetInscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InscriptionServer).GetInscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inscription_GetInscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InscriptionServer).GetInscription(ctx, req.(*GetInscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inscription_ListInscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InscriptionServer).ListInscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inscription_ListInscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InscriptionServer).ListInscription(ctx, req.(*ListInscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Inscription_ServiceDesc is the grpc.ServiceDesc for Inscription service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Inscription_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.inscription.v1.Inscription",
	HandlerType: (*InscriptionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInscription",
			Handler:    _Inscription_GetInscription_Handler,
		},
		{
			MethodName: "ListInscription",
			Handler:    _Inscription_ListInscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inscription/v1/inscription.proto",
}
