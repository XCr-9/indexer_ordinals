// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.17.3
// source: inscription/v1/inscription.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationInscriptionGetInscription = "/api.inscription.v1.Inscription/GetInscription"
const OperationInscriptionListInscription = "/api.inscription.v1.Inscription/ListInscription"

type InscriptionHTTPServer interface {
	GetInscription(context.Context, *GetInscriptionRequest) (*GetInscriptionReply, error)
	ListInscription(context.Context, *ListInscriptionRequest) (*ListInscriptionReply, error)
}

func RegisterInscriptionHTTPServer(s *http.Server, srv InscriptionHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/inscriptions/{inscription_id}", _Inscription_GetInscription0_HTTP_Handler(srv))
	r.GET("/v1/inscriptions", _Inscription_ListInscription0_HTTP_Handler(srv))
}

func _Inscription_GetInscription0_HTTP_Handler(srv InscriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetInscriptionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInscriptionGetInscription)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetInscription(ctx, req.(*GetInscriptionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetInscriptionReply)
		return ctx.Result(200, reply)
	}
}

func _Inscription_ListInscription0_HTTP_Handler(srv InscriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListInscriptionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInscriptionListInscription)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListInscription(ctx, req.(*ListInscriptionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListInscriptionReply)
		return ctx.Result(200, reply)
	}
}

type InscriptionHTTPClient interface {
	GetInscription(ctx context.Context, req *GetInscriptionRequest, opts ...http.CallOption) (rsp *GetInscriptionReply, err error)
	ListInscription(ctx context.Context, req *ListInscriptionRequest, opts ...http.CallOption) (rsp *ListInscriptionReply, err error)
}

type InscriptionHTTPClientImpl struct {
	cc *http.Client
}

func NewInscriptionHTTPClient(client *http.Client) InscriptionHTTPClient {
	return &InscriptionHTTPClientImpl{client}
}

func (c *InscriptionHTTPClientImpl) GetInscription(ctx context.Context, in *GetInscriptionRequest, opts ...http.CallOption) (*GetInscriptionReply, error) {
	var out GetInscriptionReply
	pattern := "/v1/inscriptions/{inscription_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInscriptionGetInscription))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InscriptionHTTPClientImpl) ListInscription(ctx context.Context, in *ListInscriptionRequest, opts ...http.CallOption) (*ListInscriptionReply, error) {
	var out ListInscriptionReply
	pattern := "/v1/inscriptions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInscriptionListInscription))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
