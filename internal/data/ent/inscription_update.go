// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/adshao/ordinals-indexer/internal/data/ent/inscription"
	"github.com/adshao/ordinals-indexer/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InscriptionUpdate is the builder for updating Inscription entities.
type InscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *InscriptionMutation
}

// Where appends a list predicates to the InscriptionUpdate builder.
func (iu *InscriptionUpdate) Where(ps ...predicate.Inscription) *InscriptionUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InscriptionUpdate) SetUpdatedAt(t time.Time) *InscriptionUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetInscriptionID sets the "inscription_id" field.
func (iu *InscriptionUpdate) SetInscriptionID(i int64) *InscriptionUpdate {
	iu.mutation.ResetInscriptionID()
	iu.mutation.SetInscriptionID(i)
	return iu
}

// AddInscriptionID adds i to the "inscription_id" field.
func (iu *InscriptionUpdate) AddInscriptionID(i int64) *InscriptionUpdate {
	iu.mutation.AddInscriptionID(i)
	return iu
}

// SetUID sets the "uid" field.
func (iu *InscriptionUpdate) SetUID(s string) *InscriptionUpdate {
	iu.mutation.SetUID(s)
	return iu
}

// SetAddress sets the "address" field.
func (iu *InscriptionUpdate) SetAddress(s string) *InscriptionUpdate {
	iu.mutation.SetAddress(s)
	return iu
}

// SetOutputValue sets the "output_value" field.
func (iu *InscriptionUpdate) SetOutputValue(u uint64) *InscriptionUpdate {
	iu.mutation.ResetOutputValue()
	iu.mutation.SetOutputValue(u)
	return iu
}

// AddOutputValue adds u to the "output_value" field.
func (iu *InscriptionUpdate) AddOutputValue(u int64) *InscriptionUpdate {
	iu.mutation.AddOutputValue(u)
	return iu
}

// SetContentLength sets the "content_length" field.
func (iu *InscriptionUpdate) SetContentLength(u uint64) *InscriptionUpdate {
	iu.mutation.ResetContentLength()
	iu.mutation.SetContentLength(u)
	return iu
}

// AddContentLength adds u to the "content_length" field.
func (iu *InscriptionUpdate) AddContentLength(u int64) *InscriptionUpdate {
	iu.mutation.AddContentLength(u)
	return iu
}

// SetContentType sets the "content_type" field.
func (iu *InscriptionUpdate) SetContentType(s string) *InscriptionUpdate {
	iu.mutation.SetContentType(s)
	return iu
}

// SetTimestamp sets the "timestamp" field.
func (iu *InscriptionUpdate) SetTimestamp(t time.Time) *InscriptionUpdate {
	iu.mutation.SetTimestamp(t)
	return iu
}

// SetGenesisHeight sets the "genesis_height" field.
func (iu *InscriptionUpdate) SetGenesisHeight(u uint64) *InscriptionUpdate {
	iu.mutation.ResetGenesisHeight()
	iu.mutation.SetGenesisHeight(u)
	return iu
}

// AddGenesisHeight adds u to the "genesis_height" field.
func (iu *InscriptionUpdate) AddGenesisHeight(u int64) *InscriptionUpdate {
	iu.mutation.AddGenesisHeight(u)
	return iu
}

// SetGenesisFee sets the "genesis_fee" field.
func (iu *InscriptionUpdate) SetGenesisFee(u uint64) *InscriptionUpdate {
	iu.mutation.ResetGenesisFee()
	iu.mutation.SetGenesisFee(u)
	return iu
}

// AddGenesisFee adds u to the "genesis_fee" field.
func (iu *InscriptionUpdate) AddGenesisFee(u int64) *InscriptionUpdate {
	iu.mutation.AddGenesisFee(u)
	return iu
}

// SetGenesisTx sets the "genesis_tx" field.
func (iu *InscriptionUpdate) SetGenesisTx(s string) *InscriptionUpdate {
	iu.mutation.SetGenesisTx(s)
	return iu
}

// SetLocation sets the "location" field.
func (iu *InscriptionUpdate) SetLocation(s string) *InscriptionUpdate {
	iu.mutation.SetLocation(s)
	return iu
}

// SetOutput sets the "output" field.
func (iu *InscriptionUpdate) SetOutput(s string) *InscriptionUpdate {
	iu.mutation.SetOutput(s)
	return iu
}

// SetOffset sets the "offset" field.
func (iu *InscriptionUpdate) SetOffset(u uint64) *InscriptionUpdate {
	iu.mutation.ResetOffset()
	iu.mutation.SetOffset(u)
	return iu
}

// AddOffset adds u to the "offset" field.
func (iu *InscriptionUpdate) AddOffset(u int64) *InscriptionUpdate {
	iu.mutation.AddOffset(u)
	return iu
}

// Mutation returns the InscriptionMutation object of the builder.
func (iu *InscriptionUpdate) Mutation() *InscriptionMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InscriptionUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InscriptionUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InscriptionUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InscriptionUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := inscription.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

func (iu *InscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(inscription.Table, inscription.Columns, sqlgraph.NewFieldSpec(inscription.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(inscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.InscriptionID(); ok {
		_spec.SetField(inscription.FieldInscriptionID, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedInscriptionID(); ok {
		_spec.AddField(inscription.FieldInscriptionID, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.UID(); ok {
		_spec.SetField(inscription.FieldUID, field.TypeString, value)
	}
	if value, ok := iu.mutation.Address(); ok {
		_spec.SetField(inscription.FieldAddress, field.TypeString, value)
	}
	if value, ok := iu.mutation.OutputValue(); ok {
		_spec.SetField(inscription.FieldOutputValue, field.TypeUint64, value)
	}
	if value, ok := iu.mutation.AddedOutputValue(); ok {
		_spec.AddField(inscription.FieldOutputValue, field.TypeUint64, value)
	}
	if value, ok := iu.mutation.ContentLength(); ok {
		_spec.SetField(inscription.FieldContentLength, field.TypeUint64, value)
	}
	if value, ok := iu.mutation.AddedContentLength(); ok {
		_spec.AddField(inscription.FieldContentLength, field.TypeUint64, value)
	}
	if value, ok := iu.mutation.ContentType(); ok {
		_spec.SetField(inscription.FieldContentType, field.TypeString, value)
	}
	if value, ok := iu.mutation.Timestamp(); ok {
		_spec.SetField(inscription.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := iu.mutation.GenesisHeight(); ok {
		_spec.SetField(inscription.FieldGenesisHeight, field.TypeUint64, value)
	}
	if value, ok := iu.mutation.AddedGenesisHeight(); ok {
		_spec.AddField(inscription.FieldGenesisHeight, field.TypeUint64, value)
	}
	if value, ok := iu.mutation.GenesisFee(); ok {
		_spec.SetField(inscription.FieldGenesisFee, field.TypeUint64, value)
	}
	if value, ok := iu.mutation.AddedGenesisFee(); ok {
		_spec.AddField(inscription.FieldGenesisFee, field.TypeUint64, value)
	}
	if value, ok := iu.mutation.GenesisTx(); ok {
		_spec.SetField(inscription.FieldGenesisTx, field.TypeString, value)
	}
	if value, ok := iu.mutation.Location(); ok {
		_spec.SetField(inscription.FieldLocation, field.TypeString, value)
	}
	if value, ok := iu.mutation.Output(); ok {
		_spec.SetField(inscription.FieldOutput, field.TypeString, value)
	}
	if value, ok := iu.mutation.Offset(); ok {
		_spec.SetField(inscription.FieldOffset, field.TypeUint64, value)
	}
	if value, ok := iu.mutation.AddedOffset(); ok {
		_spec.AddField(inscription.FieldOffset, field.TypeUint64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InscriptionUpdateOne is the builder for updating a single Inscription entity.
type InscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InscriptionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InscriptionUpdateOne) SetUpdatedAt(t time.Time) *InscriptionUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetInscriptionID sets the "inscription_id" field.
func (iuo *InscriptionUpdateOne) SetInscriptionID(i int64) *InscriptionUpdateOne {
	iuo.mutation.ResetInscriptionID()
	iuo.mutation.SetInscriptionID(i)
	return iuo
}

// AddInscriptionID adds i to the "inscription_id" field.
func (iuo *InscriptionUpdateOne) AddInscriptionID(i int64) *InscriptionUpdateOne {
	iuo.mutation.AddInscriptionID(i)
	return iuo
}

// SetUID sets the "uid" field.
func (iuo *InscriptionUpdateOne) SetUID(s string) *InscriptionUpdateOne {
	iuo.mutation.SetUID(s)
	return iuo
}

// SetAddress sets the "address" field.
func (iuo *InscriptionUpdateOne) SetAddress(s string) *InscriptionUpdateOne {
	iuo.mutation.SetAddress(s)
	return iuo
}

// SetOutputValue sets the "output_value" field.
func (iuo *InscriptionUpdateOne) SetOutputValue(u uint64) *InscriptionUpdateOne {
	iuo.mutation.ResetOutputValue()
	iuo.mutation.SetOutputValue(u)
	return iuo
}

// AddOutputValue adds u to the "output_value" field.
func (iuo *InscriptionUpdateOne) AddOutputValue(u int64) *InscriptionUpdateOne {
	iuo.mutation.AddOutputValue(u)
	return iuo
}

// SetContentLength sets the "content_length" field.
func (iuo *InscriptionUpdateOne) SetContentLength(u uint64) *InscriptionUpdateOne {
	iuo.mutation.ResetContentLength()
	iuo.mutation.SetContentLength(u)
	return iuo
}

// AddContentLength adds u to the "content_length" field.
func (iuo *InscriptionUpdateOne) AddContentLength(u int64) *InscriptionUpdateOne {
	iuo.mutation.AddContentLength(u)
	return iuo
}

// SetContentType sets the "content_type" field.
func (iuo *InscriptionUpdateOne) SetContentType(s string) *InscriptionUpdateOne {
	iuo.mutation.SetContentType(s)
	return iuo
}

// SetTimestamp sets the "timestamp" field.
func (iuo *InscriptionUpdateOne) SetTimestamp(t time.Time) *InscriptionUpdateOne {
	iuo.mutation.SetTimestamp(t)
	return iuo
}

// SetGenesisHeight sets the "genesis_height" field.
func (iuo *InscriptionUpdateOne) SetGenesisHeight(u uint64) *InscriptionUpdateOne {
	iuo.mutation.ResetGenesisHeight()
	iuo.mutation.SetGenesisHeight(u)
	return iuo
}

// AddGenesisHeight adds u to the "genesis_height" field.
func (iuo *InscriptionUpdateOne) AddGenesisHeight(u int64) *InscriptionUpdateOne {
	iuo.mutation.AddGenesisHeight(u)
	return iuo
}

// SetGenesisFee sets the "genesis_fee" field.
func (iuo *InscriptionUpdateOne) SetGenesisFee(u uint64) *InscriptionUpdateOne {
	iuo.mutation.ResetGenesisFee()
	iuo.mutation.SetGenesisFee(u)
	return iuo
}

// AddGenesisFee adds u to the "genesis_fee" field.
func (iuo *InscriptionUpdateOne) AddGenesisFee(u int64) *InscriptionUpdateOne {
	iuo.mutation.AddGenesisFee(u)
	return iuo
}

// SetGenesisTx sets the "genesis_tx" field.
func (iuo *InscriptionUpdateOne) SetGenesisTx(s string) *InscriptionUpdateOne {
	iuo.mutation.SetGenesisTx(s)
	return iuo
}

// SetLocation sets the "location" field.
func (iuo *InscriptionUpdateOne) SetLocation(s string) *InscriptionUpdateOne {
	iuo.mutation.SetLocation(s)
	return iuo
}

// SetOutput sets the "output" field.
func (iuo *InscriptionUpdateOne) SetOutput(s string) *InscriptionUpdateOne {
	iuo.mutation.SetOutput(s)
	return iuo
}

// SetOffset sets the "offset" field.
func (iuo *InscriptionUpdateOne) SetOffset(u uint64) *InscriptionUpdateOne {
	iuo.mutation.ResetOffset()
	iuo.mutation.SetOffset(u)
	return iuo
}

// AddOffset adds u to the "offset" field.
func (iuo *InscriptionUpdateOne) AddOffset(u int64) *InscriptionUpdateOne {
	iuo.mutation.AddOffset(u)
	return iuo
}

// Mutation returns the InscriptionMutation object of the builder.
func (iuo *InscriptionUpdateOne) Mutation() *InscriptionMutation {
	return iuo.mutation
}

// Where appends a list predicates to the InscriptionUpdate builder.
func (iuo *InscriptionUpdateOne) Where(ps ...predicate.Inscription) *InscriptionUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InscriptionUpdateOne) Select(field string, fields ...string) *InscriptionUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Inscription entity.
func (iuo *InscriptionUpdateOne) Save(ctx context.Context) (*Inscription, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InscriptionUpdateOne) SaveX(ctx context.Context) *Inscription {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InscriptionUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := inscription.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

func (iuo *InscriptionUpdateOne) sqlSave(ctx context.Context) (_node *Inscription, err error) {
	_spec := sqlgraph.NewUpdateSpec(inscription.Table, inscription.Columns, sqlgraph.NewFieldSpec(inscription.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Inscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inscription.FieldID)
		for _, f := range fields {
			if !inscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != inscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(inscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.InscriptionID(); ok {
		_spec.SetField(inscription.FieldInscriptionID, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedInscriptionID(); ok {
		_spec.AddField(inscription.FieldInscriptionID, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.UID(); ok {
		_spec.SetField(inscription.FieldUID, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Address(); ok {
		_spec.SetField(inscription.FieldAddress, field.TypeString, value)
	}
	if value, ok := iuo.mutation.OutputValue(); ok {
		_spec.SetField(inscription.FieldOutputValue, field.TypeUint64, value)
	}
	if value, ok := iuo.mutation.AddedOutputValue(); ok {
		_spec.AddField(inscription.FieldOutputValue, field.TypeUint64, value)
	}
	if value, ok := iuo.mutation.ContentLength(); ok {
		_spec.SetField(inscription.FieldContentLength, field.TypeUint64, value)
	}
	if value, ok := iuo.mutation.AddedContentLength(); ok {
		_spec.AddField(inscription.FieldContentLength, field.TypeUint64, value)
	}
	if value, ok := iuo.mutation.ContentType(); ok {
		_spec.SetField(inscription.FieldContentType, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Timestamp(); ok {
		_spec.SetField(inscription.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.GenesisHeight(); ok {
		_spec.SetField(inscription.FieldGenesisHeight, field.TypeUint64, value)
	}
	if value, ok := iuo.mutation.AddedGenesisHeight(); ok {
		_spec.AddField(inscription.FieldGenesisHeight, field.TypeUint64, value)
	}
	if value, ok := iuo.mutation.GenesisFee(); ok {
		_spec.SetField(inscription.FieldGenesisFee, field.TypeUint64, value)
	}
	if value, ok := iuo.mutation.AddedGenesisFee(); ok {
		_spec.AddField(inscription.FieldGenesisFee, field.TypeUint64, value)
	}
	if value, ok := iuo.mutation.GenesisTx(); ok {
		_spec.SetField(inscription.FieldGenesisTx, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Location(); ok {
		_spec.SetField(inscription.FieldLocation, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Output(); ok {
		_spec.SetField(inscription.FieldOutput, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Offset(); ok {
		_spec.SetField(inscription.FieldOffset, field.TypeUint64, value)
	}
	if value, ok := iuo.mutation.AddedOffset(); ok {
		_spec.AddField(inscription.FieldOffset, field.TypeUint64, value)
	}
	_node = &Inscription{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
