// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/adshao/ordinals-indexer/internal/data/ent/collection"
	"github.com/adshao/ordinals-indexer/internal/data/ent/token"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TokenCreate is the builder for creating a Token entity.
type TokenCreate struct {
	config
	mutation *TokenMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TokenCreate) SetCreatedAt(t time.Time) *TokenCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TokenCreate) SetNillableCreatedAt(t *time.Time) *TokenCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TokenCreate) SetUpdatedAt(t time.Time) *TokenCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TokenCreate) SetNillableUpdatedAt(t *time.Time) *TokenCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetTick sets the "tick" field.
func (tc *TokenCreate) SetTick(s string) *TokenCreate {
	tc.mutation.SetTick(s)
	return tc
}

// SetP sets the "p" field.
func (tc *TokenCreate) SetP(s string) *TokenCreate {
	tc.mutation.SetP(s)
	return tc
}

// SetNillableP sets the "p" field if the given value is not nil.
func (tc *TokenCreate) SetNillableP(s *string) *TokenCreate {
	if s != nil {
		tc.SetP(*s)
	}
	return tc
}

// SetTokenID sets the "token_id" field.
func (tc *TokenCreate) SetTokenID(u uint64) *TokenCreate {
	tc.mutation.SetTokenID(u)
	return tc
}

// SetTxHash sets the "tx_hash" field.
func (tc *TokenCreate) SetTxHash(s string) *TokenCreate {
	tc.mutation.SetTxHash(s)
	return tc
}

// SetBlockHeight sets the "block_height" field.
func (tc *TokenCreate) SetBlockHeight(u uint64) *TokenCreate {
	tc.mutation.SetBlockHeight(u)
	return tc
}

// SetBlockTime sets the "block_time" field.
func (tc *TokenCreate) SetBlockTime(t time.Time) *TokenCreate {
	tc.mutation.SetBlockTime(t)
	return tc
}

// SetAddress sets the "address" field.
func (tc *TokenCreate) SetAddress(s string) *TokenCreate {
	tc.mutation.SetAddress(s)
	return tc
}

// SetInscriptionID sets the "inscription_id" field.
func (tc *TokenCreate) SetInscriptionID(i int64) *TokenCreate {
	tc.mutation.SetInscriptionID(i)
	return tc
}

// SetInscriptionUID sets the "inscription_uid" field.
func (tc *TokenCreate) SetInscriptionUID(s string) *TokenCreate {
	tc.mutation.SetInscriptionUID(s)
	return tc
}

// SetCollectionID sets the "collection" edge to the Collection entity by ID.
func (tc *TokenCreate) SetCollectionID(id int) *TokenCreate {
	tc.mutation.SetCollectionID(id)
	return tc
}

// SetNillableCollectionID sets the "collection" edge to the Collection entity by ID if the given value is not nil.
func (tc *TokenCreate) SetNillableCollectionID(id *int) *TokenCreate {
	if id != nil {
		tc = tc.SetCollectionID(*id)
	}
	return tc
}

// SetCollection sets the "collection" edge to the Collection entity.
func (tc *TokenCreate) SetCollection(c *Collection) *TokenCreate {
	return tc.SetCollectionID(c.ID)
}

// Mutation returns the TokenMutation object of the builder.
func (tc *TokenCreate) Mutation() *TokenMutation {
	return tc.mutation
}

// Save creates the Token in the database.
func (tc *TokenCreate) Save(ctx context.Context) (*Token, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TokenCreate) SaveX(ctx context.Context) *Token {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TokenCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TokenCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TokenCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := token.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := token.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.P(); !ok {
		v := token.DefaultP
		tc.mutation.SetP(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TokenCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Token.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Token.updated_at"`)}
	}
	if _, ok := tc.mutation.Tick(); !ok {
		return &ValidationError{Name: "tick", err: errors.New(`ent: missing required field "Token.tick"`)}
	}
	if _, ok := tc.mutation.P(); !ok {
		return &ValidationError{Name: "p", err: errors.New(`ent: missing required field "Token.p"`)}
	}
	if _, ok := tc.mutation.TokenID(); !ok {
		return &ValidationError{Name: "token_id", err: errors.New(`ent: missing required field "Token.token_id"`)}
	}
	if _, ok := tc.mutation.TxHash(); !ok {
		return &ValidationError{Name: "tx_hash", err: errors.New(`ent: missing required field "Token.tx_hash"`)}
	}
	if _, ok := tc.mutation.BlockHeight(); !ok {
		return &ValidationError{Name: "block_height", err: errors.New(`ent: missing required field "Token.block_height"`)}
	}
	if _, ok := tc.mutation.BlockTime(); !ok {
		return &ValidationError{Name: "block_time", err: errors.New(`ent: missing required field "Token.block_time"`)}
	}
	if _, ok := tc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Token.address"`)}
	}
	if _, ok := tc.mutation.InscriptionID(); !ok {
		return &ValidationError{Name: "inscription_id", err: errors.New(`ent: missing required field "Token.inscription_id"`)}
	}
	if _, ok := tc.mutation.InscriptionUID(); !ok {
		return &ValidationError{Name: "inscription_uid", err: errors.New(`ent: missing required field "Token.inscription_uid"`)}
	}
	return nil
}

func (tc *TokenCreate) sqlSave(ctx context.Context) (*Token, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TokenCreate) createSpec() (*Token, *sqlgraph.CreateSpec) {
	var (
		_node = &Token{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(token.Table, sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(token.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(token.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.Tick(); ok {
		_spec.SetField(token.FieldTick, field.TypeString, value)
		_node.Tick = value
	}
	if value, ok := tc.mutation.P(); ok {
		_spec.SetField(token.FieldP, field.TypeString, value)
		_node.P = value
	}
	if value, ok := tc.mutation.TokenID(); ok {
		_spec.SetField(token.FieldTokenID, field.TypeUint64, value)
		_node.TokenID = value
	}
	if value, ok := tc.mutation.TxHash(); ok {
		_spec.SetField(token.FieldTxHash, field.TypeString, value)
		_node.TxHash = value
	}
	if value, ok := tc.mutation.BlockHeight(); ok {
		_spec.SetField(token.FieldBlockHeight, field.TypeUint64, value)
		_node.BlockHeight = value
	}
	if value, ok := tc.mutation.BlockTime(); ok {
		_spec.SetField(token.FieldBlockTime, field.TypeTime, value)
		_node.BlockTime = value
	}
	if value, ok := tc.mutation.Address(); ok {
		_spec.SetField(token.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := tc.mutation.InscriptionID(); ok {
		_spec.SetField(token.FieldInscriptionID, field.TypeInt64, value)
		_node.InscriptionID = value
	}
	if value, ok := tc.mutation.InscriptionUID(); ok {
		_spec.SetField(token.FieldInscriptionUID, field.TypeString, value)
		_node.InscriptionUID = value
	}
	if nodes := tc.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   token.CollectionTable,
			Columns: []string{token.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.collection_tokens = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Token.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TokenUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TokenCreate) OnConflict(opts ...sql.ConflictOption) *TokenUpsertOne {
	tc.conflict = opts
	return &TokenUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Token.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TokenCreate) OnConflictColumns(columns ...string) *TokenUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TokenUpsertOne{
		create: tc,
	}
}

type (
	// TokenUpsertOne is the builder for "upsert"-ing
	//  one Token node.
	TokenUpsertOne struct {
		create *TokenCreate
	}

	// TokenUpsert is the "OnConflict" setter.
	TokenUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TokenUpsert) SetUpdatedAt(v time.Time) *TokenUpsert {
	u.Set(token.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TokenUpsert) UpdateUpdatedAt() *TokenUpsert {
	u.SetExcluded(token.FieldUpdatedAt)
	return u
}

// SetTick sets the "tick" field.
func (u *TokenUpsert) SetTick(v string) *TokenUpsert {
	u.Set(token.FieldTick, v)
	return u
}

// UpdateTick sets the "tick" field to the value that was provided on create.
func (u *TokenUpsert) UpdateTick() *TokenUpsert {
	u.SetExcluded(token.FieldTick)
	return u
}

// SetP sets the "p" field.
func (u *TokenUpsert) SetP(v string) *TokenUpsert {
	u.Set(token.FieldP, v)
	return u
}

// UpdateP sets the "p" field to the value that was provided on create.
func (u *TokenUpsert) UpdateP() *TokenUpsert {
	u.SetExcluded(token.FieldP)
	return u
}

// SetTokenID sets the "token_id" field.
func (u *TokenUpsert) SetTokenID(v uint64) *TokenUpsert {
	u.Set(token.FieldTokenID, v)
	return u
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *TokenUpsert) UpdateTokenID() *TokenUpsert {
	u.SetExcluded(token.FieldTokenID)
	return u
}

// AddTokenID adds v to the "token_id" field.
func (u *TokenUpsert) AddTokenID(v uint64) *TokenUpsert {
	u.Add(token.FieldTokenID, v)
	return u
}

// SetTxHash sets the "tx_hash" field.
func (u *TokenUpsert) SetTxHash(v string) *TokenUpsert {
	u.Set(token.FieldTxHash, v)
	return u
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *TokenUpsert) UpdateTxHash() *TokenUpsert {
	u.SetExcluded(token.FieldTxHash)
	return u
}

// SetBlockHeight sets the "block_height" field.
func (u *TokenUpsert) SetBlockHeight(v uint64) *TokenUpsert {
	u.Set(token.FieldBlockHeight, v)
	return u
}

// UpdateBlockHeight sets the "block_height" field to the value that was provided on create.
func (u *TokenUpsert) UpdateBlockHeight() *TokenUpsert {
	u.SetExcluded(token.FieldBlockHeight)
	return u
}

// AddBlockHeight adds v to the "block_height" field.
func (u *TokenUpsert) AddBlockHeight(v uint64) *TokenUpsert {
	u.Add(token.FieldBlockHeight, v)
	return u
}

// SetBlockTime sets the "block_time" field.
func (u *TokenUpsert) SetBlockTime(v time.Time) *TokenUpsert {
	u.Set(token.FieldBlockTime, v)
	return u
}

// UpdateBlockTime sets the "block_time" field to the value that was provided on create.
func (u *TokenUpsert) UpdateBlockTime() *TokenUpsert {
	u.SetExcluded(token.FieldBlockTime)
	return u
}

// SetAddress sets the "address" field.
func (u *TokenUpsert) SetAddress(v string) *TokenUpsert {
	u.Set(token.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *TokenUpsert) UpdateAddress() *TokenUpsert {
	u.SetExcluded(token.FieldAddress)
	return u
}

// SetInscriptionID sets the "inscription_id" field.
func (u *TokenUpsert) SetInscriptionID(v int64) *TokenUpsert {
	u.Set(token.FieldInscriptionID, v)
	return u
}

// UpdateInscriptionID sets the "inscription_id" field to the value that was provided on create.
func (u *TokenUpsert) UpdateInscriptionID() *TokenUpsert {
	u.SetExcluded(token.FieldInscriptionID)
	return u
}

// AddInscriptionID adds v to the "inscription_id" field.
func (u *TokenUpsert) AddInscriptionID(v int64) *TokenUpsert {
	u.Add(token.FieldInscriptionID, v)
	return u
}

// SetInscriptionUID sets the "inscription_uid" field.
func (u *TokenUpsert) SetInscriptionUID(v string) *TokenUpsert {
	u.Set(token.FieldInscriptionUID, v)
	return u
}

// UpdateInscriptionUID sets the "inscription_uid" field to the value that was provided on create.
func (u *TokenUpsert) UpdateInscriptionUID() *TokenUpsert {
	u.SetExcluded(token.FieldInscriptionUID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Token.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TokenUpsertOne) UpdateNewValues() *TokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(token.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Token.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TokenUpsertOne) Ignore() *TokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TokenUpsertOne) DoNothing() *TokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TokenCreate.OnConflict
// documentation for more info.
func (u *TokenUpsertOne) Update(set func(*TokenUpsert)) *TokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TokenUpsertOne) SetUpdatedAt(v time.Time) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateUpdatedAt() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTick sets the "tick" field.
func (u *TokenUpsertOne) SetTick(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetTick(v)
	})
}

// UpdateTick sets the "tick" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateTick() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateTick()
	})
}

// SetP sets the "p" field.
func (u *TokenUpsertOne) SetP(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetP(v)
	})
}

// UpdateP sets the "p" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateP() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateP()
	})
}

// SetTokenID sets the "token_id" field.
func (u *TokenUpsertOne) SetTokenID(v uint64) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetTokenID(v)
	})
}

// AddTokenID adds v to the "token_id" field.
func (u *TokenUpsertOne) AddTokenID(v uint64) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.AddTokenID(v)
	})
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateTokenID() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateTokenID()
	})
}

// SetTxHash sets the "tx_hash" field.
func (u *TokenUpsertOne) SetTxHash(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateTxHash() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateTxHash()
	})
}

// SetBlockHeight sets the "block_height" field.
func (u *TokenUpsertOne) SetBlockHeight(v uint64) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetBlockHeight(v)
	})
}

// AddBlockHeight adds v to the "block_height" field.
func (u *TokenUpsertOne) AddBlockHeight(v uint64) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.AddBlockHeight(v)
	})
}

// UpdateBlockHeight sets the "block_height" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateBlockHeight() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateBlockHeight()
	})
}

// SetBlockTime sets the "block_time" field.
func (u *TokenUpsertOne) SetBlockTime(v time.Time) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetBlockTime(v)
	})
}

// UpdateBlockTime sets the "block_time" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateBlockTime() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateBlockTime()
	})
}

// SetAddress sets the "address" field.
func (u *TokenUpsertOne) SetAddress(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateAddress() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateAddress()
	})
}

// SetInscriptionID sets the "inscription_id" field.
func (u *TokenUpsertOne) SetInscriptionID(v int64) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetInscriptionID(v)
	})
}

// AddInscriptionID adds v to the "inscription_id" field.
func (u *TokenUpsertOne) AddInscriptionID(v int64) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.AddInscriptionID(v)
	})
}

// UpdateInscriptionID sets the "inscription_id" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateInscriptionID() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateInscriptionID()
	})
}

// SetInscriptionUID sets the "inscription_uid" field.
func (u *TokenUpsertOne) SetInscriptionUID(v string) *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.SetInscriptionUID(v)
	})
}

// UpdateInscriptionUID sets the "inscription_uid" field to the value that was provided on create.
func (u *TokenUpsertOne) UpdateInscriptionUID() *TokenUpsertOne {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateInscriptionUID()
	})
}

// Exec executes the query.
func (u *TokenUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TokenCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TokenUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TokenUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TokenUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TokenCreateBulk is the builder for creating many Token entities in bulk.
type TokenCreateBulk struct {
	config
	builders []*TokenCreate
	conflict []sql.ConflictOption
}

// Save creates the Token entities in the database.
func (tcb *TokenCreateBulk) Save(ctx context.Context) ([]*Token, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Token, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TokenCreateBulk) SaveX(ctx context.Context) []*Token {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TokenCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TokenCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Token.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TokenUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TokenCreateBulk) OnConflict(opts ...sql.ConflictOption) *TokenUpsertBulk {
	tcb.conflict = opts
	return &TokenUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Token.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TokenCreateBulk) OnConflictColumns(columns ...string) *TokenUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TokenUpsertBulk{
		create: tcb,
	}
}

// TokenUpsertBulk is the builder for "upsert"-ing
// a bulk of Token nodes.
type TokenUpsertBulk struct {
	create *TokenCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Token.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TokenUpsertBulk) UpdateNewValues() *TokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(token.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Token.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TokenUpsertBulk) Ignore() *TokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TokenUpsertBulk) DoNothing() *TokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TokenCreateBulk.OnConflict
// documentation for more info.
func (u *TokenUpsertBulk) Update(set func(*TokenUpsert)) *TokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TokenUpsertBulk) SetUpdatedAt(v time.Time) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateUpdatedAt() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTick sets the "tick" field.
func (u *TokenUpsertBulk) SetTick(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetTick(v)
	})
}

// UpdateTick sets the "tick" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateTick() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateTick()
	})
}

// SetP sets the "p" field.
func (u *TokenUpsertBulk) SetP(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetP(v)
	})
}

// UpdateP sets the "p" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateP() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateP()
	})
}

// SetTokenID sets the "token_id" field.
func (u *TokenUpsertBulk) SetTokenID(v uint64) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetTokenID(v)
	})
}

// AddTokenID adds v to the "token_id" field.
func (u *TokenUpsertBulk) AddTokenID(v uint64) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.AddTokenID(v)
	})
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateTokenID() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateTokenID()
	})
}

// SetTxHash sets the "tx_hash" field.
func (u *TokenUpsertBulk) SetTxHash(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateTxHash() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateTxHash()
	})
}

// SetBlockHeight sets the "block_height" field.
func (u *TokenUpsertBulk) SetBlockHeight(v uint64) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetBlockHeight(v)
	})
}

// AddBlockHeight adds v to the "block_height" field.
func (u *TokenUpsertBulk) AddBlockHeight(v uint64) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.AddBlockHeight(v)
	})
}

// UpdateBlockHeight sets the "block_height" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateBlockHeight() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateBlockHeight()
	})
}

// SetBlockTime sets the "block_time" field.
func (u *TokenUpsertBulk) SetBlockTime(v time.Time) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetBlockTime(v)
	})
}

// UpdateBlockTime sets the "block_time" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateBlockTime() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateBlockTime()
	})
}

// SetAddress sets the "address" field.
func (u *TokenUpsertBulk) SetAddress(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateAddress() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateAddress()
	})
}

// SetInscriptionID sets the "inscription_id" field.
func (u *TokenUpsertBulk) SetInscriptionID(v int64) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetInscriptionID(v)
	})
}

// AddInscriptionID adds v to the "inscription_id" field.
func (u *TokenUpsertBulk) AddInscriptionID(v int64) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.AddInscriptionID(v)
	})
}

// UpdateInscriptionID sets the "inscription_id" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateInscriptionID() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateInscriptionID()
	})
}

// SetInscriptionUID sets the "inscription_uid" field.
func (u *TokenUpsertBulk) SetInscriptionUID(v string) *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.SetInscriptionUID(v)
	})
}

// UpdateInscriptionUID sets the "inscription_uid" field to the value that was provided on create.
func (u *TokenUpsertBulk) UpdateInscriptionUID() *TokenUpsertBulk {
	return u.Update(func(s *TokenUpsert) {
		s.UpdateInscriptionUID()
	})
}

// Exec executes the query.
func (u *TokenUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TokenCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TokenCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TokenUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
