// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/adshao/ordinals-indexer/internal/data/ent/collection"
	"github.com/adshao/ordinals-indexer/internal/data/ent/token"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Token is the model entity for the Token schema.
type Token struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Tick holds the value of the "tick" field.
	Tick string `json:"tick,omitempty"`
	// P holds the value of the "p" field.
	P string `json:"p,omitempty"`
	// TokenID holds the value of the "token_id" field.
	TokenID uint64 `json:"token_id,omitempty"`
	// TxHash holds the value of the "tx_hash" field.
	TxHash string `json:"tx_hash,omitempty"`
	// BlockHeight holds the value of the "block_height" field.
	BlockHeight uint64 `json:"block_height,omitempty"`
	// BlockTime holds the value of the "block_time" field.
	BlockTime time.Time `json:"block_time,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// InscriptionID holds the value of the "inscription_id" field.
	InscriptionID int64 `json:"inscription_id,omitempty"`
	// InscriptionUID holds the value of the "inscription_uid" field.
	InscriptionUID string `json:"inscription_uid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TokenQuery when eager-loading is set.
	Edges             TokenEdges `json:"edges"`
	collection_tokens *int
	selectValues      sql.SelectValues
}

// TokenEdges holds the relations/edges for other nodes in the graph.
type TokenEdges struct {
	// Collection holds the value of the collection edge.
	Collection *Collection `json:"collection,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CollectionOrErr returns the Collection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TokenEdges) CollectionOrErr() (*Collection, error) {
	if e.loadedTypes[0] {
		if e.Collection == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: collection.Label}
		}
		return e.Collection, nil
	}
	return nil, &NotLoadedError{edge: "collection"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Token) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case token.FieldID, token.FieldTokenID, token.FieldBlockHeight, token.FieldInscriptionID:
			values[i] = new(sql.NullInt64)
		case token.FieldTick, token.FieldP, token.FieldTxHash, token.FieldAddress, token.FieldInscriptionUID:
			values[i] = new(sql.NullString)
		case token.FieldCreatedAt, token.FieldUpdatedAt, token.FieldBlockTime:
			values[i] = new(sql.NullTime)
		case token.ForeignKeys[0]: // collection_tokens
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Token fields.
func (t *Token) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case token.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case token.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case token.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case token.FieldTick:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tick", values[i])
			} else if value.Valid {
				t.Tick = value.String
			}
		case token.FieldP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field p", values[i])
			} else if value.Valid {
				t.P = value.String
			}
		case token.FieldTokenID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field token_id", values[i])
			} else if value.Valid {
				t.TokenID = uint64(value.Int64)
			}
		case token.FieldTxHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_hash", values[i])
			} else if value.Valid {
				t.TxHash = value.String
			}
		case token.FieldBlockHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field block_height", values[i])
			} else if value.Valid {
				t.BlockHeight = uint64(value.Int64)
			}
		case token.FieldBlockTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field block_time", values[i])
			} else if value.Valid {
				t.BlockTime = value.Time
			}
		case token.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				t.Address = value.String
			}
		case token.FieldInscriptionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field inscription_id", values[i])
			} else if value.Valid {
				t.InscriptionID = value.Int64
			}
		case token.FieldInscriptionUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inscription_uid", values[i])
			} else if value.Valid {
				t.InscriptionUID = value.String
			}
		case token.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field collection_tokens", value)
			} else if value.Valid {
				t.collection_tokens = new(int)
				*t.collection_tokens = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Token.
// This includes values selected through modifiers, order, etc.
func (t *Token) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryCollection queries the "collection" edge of the Token entity.
func (t *Token) QueryCollection() *CollectionQuery {
	return NewTokenClient(t.config).QueryCollection(t)
}

// Update returns a builder for updating this Token.
// Note that you need to call Token.Unwrap() before calling this method if this Token
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Token) Update() *TokenUpdateOne {
	return NewTokenClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Token entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Token) Unwrap() *Token {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Token is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Token) String() string {
	var builder strings.Builder
	builder.WriteString("Token(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tick=")
	builder.WriteString(t.Tick)
	builder.WriteString(", ")
	builder.WriteString("p=")
	builder.WriteString(t.P)
	builder.WriteString(", ")
	builder.WriteString("token_id=")
	builder.WriteString(fmt.Sprintf("%v", t.TokenID))
	builder.WriteString(", ")
	builder.WriteString("tx_hash=")
	builder.WriteString(t.TxHash)
	builder.WriteString(", ")
	builder.WriteString("block_height=")
	builder.WriteString(fmt.Sprintf("%v", t.BlockHeight))
	builder.WriteString(", ")
	builder.WriteString("block_time=")
	builder.WriteString(t.BlockTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(t.Address)
	builder.WriteString(", ")
	builder.WriteString("inscription_id=")
	builder.WriteString(fmt.Sprintf("%v", t.InscriptionID))
	builder.WriteString(", ")
	builder.WriteString("inscription_uid=")
	builder.WriteString(t.InscriptionUID)
	builder.WriteByte(')')
	return builder.String()
}

// Tokens is a parsable slice of Token.
type Tokens []*Token
