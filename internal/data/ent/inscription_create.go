// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/adshao/ordinals-indexer/internal/data/ent/inscription"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InscriptionCreate is the builder for creating a Inscription entity.
type InscriptionCreate struct {
	config
	mutation *InscriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ic *InscriptionCreate) SetCreatedAt(t time.Time) *InscriptionCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InscriptionCreate) SetNillableCreatedAt(t *time.Time) *InscriptionCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InscriptionCreate) SetUpdatedAt(t time.Time) *InscriptionCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InscriptionCreate) SetNillableUpdatedAt(t *time.Time) *InscriptionCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetInscriptionID sets the "inscription_id" field.
func (ic *InscriptionCreate) SetInscriptionID(i int64) *InscriptionCreate {
	ic.mutation.SetInscriptionID(i)
	return ic
}

// SetUID sets the "uid" field.
func (ic *InscriptionCreate) SetUID(s string) *InscriptionCreate {
	ic.mutation.SetUID(s)
	return ic
}

// SetAddress sets the "address" field.
func (ic *InscriptionCreate) SetAddress(s string) *InscriptionCreate {
	ic.mutation.SetAddress(s)
	return ic
}

// SetOutputValue sets the "output_value" field.
func (ic *InscriptionCreate) SetOutputValue(u uint64) *InscriptionCreate {
	ic.mutation.SetOutputValue(u)
	return ic
}

// SetContentLength sets the "content_length" field.
func (ic *InscriptionCreate) SetContentLength(u uint64) *InscriptionCreate {
	ic.mutation.SetContentLength(u)
	return ic
}

// SetContentType sets the "content_type" field.
func (ic *InscriptionCreate) SetContentType(s string) *InscriptionCreate {
	ic.mutation.SetContentType(s)
	return ic
}

// SetTimestamp sets the "timestamp" field.
func (ic *InscriptionCreate) SetTimestamp(t time.Time) *InscriptionCreate {
	ic.mutation.SetTimestamp(t)
	return ic
}

// SetGenesisHeight sets the "genesis_height" field.
func (ic *InscriptionCreate) SetGenesisHeight(u uint64) *InscriptionCreate {
	ic.mutation.SetGenesisHeight(u)
	return ic
}

// SetGenesisFee sets the "genesis_fee" field.
func (ic *InscriptionCreate) SetGenesisFee(u uint64) *InscriptionCreate {
	ic.mutation.SetGenesisFee(u)
	return ic
}

// SetGenesisTx sets the "genesis_tx" field.
func (ic *InscriptionCreate) SetGenesisTx(s string) *InscriptionCreate {
	ic.mutation.SetGenesisTx(s)
	return ic
}

// SetLocation sets the "location" field.
func (ic *InscriptionCreate) SetLocation(s string) *InscriptionCreate {
	ic.mutation.SetLocation(s)
	return ic
}

// SetOutput sets the "output" field.
func (ic *InscriptionCreate) SetOutput(s string) *InscriptionCreate {
	ic.mutation.SetOutput(s)
	return ic
}

// SetOffset sets the "offset" field.
func (ic *InscriptionCreate) SetOffset(u uint64) *InscriptionCreate {
	ic.mutation.SetOffset(u)
	return ic
}

// Mutation returns the InscriptionMutation object of the builder.
func (ic *InscriptionCreate) Mutation() *InscriptionMutation {
	return ic.mutation
}

// Save creates the Inscription in the database.
func (ic *InscriptionCreate) Save(ctx context.Context) (*Inscription, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InscriptionCreate) SaveX(ctx context.Context) *Inscription {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InscriptionCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InscriptionCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InscriptionCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := inscription.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := inscription.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InscriptionCreate) check() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Inscription.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Inscription.updated_at"`)}
	}
	if _, ok := ic.mutation.InscriptionID(); !ok {
		return &ValidationError{Name: "inscription_id", err: errors.New(`ent: missing required field "Inscription.inscription_id"`)}
	}
	if _, ok := ic.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "Inscription.uid"`)}
	}
	if _, ok := ic.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Inscription.address"`)}
	}
	if _, ok := ic.mutation.OutputValue(); !ok {
		return &ValidationError{Name: "output_value", err: errors.New(`ent: missing required field "Inscription.output_value"`)}
	}
	if _, ok := ic.mutation.ContentLength(); !ok {
		return &ValidationError{Name: "content_length", err: errors.New(`ent: missing required field "Inscription.content_length"`)}
	}
	if _, ok := ic.mutation.ContentType(); !ok {
		return &ValidationError{Name: "content_type", err: errors.New(`ent: missing required field "Inscription.content_type"`)}
	}
	if _, ok := ic.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Inscription.timestamp"`)}
	}
	if _, ok := ic.mutation.GenesisHeight(); !ok {
		return &ValidationError{Name: "genesis_height", err: errors.New(`ent: missing required field "Inscription.genesis_height"`)}
	}
	if _, ok := ic.mutation.GenesisFee(); !ok {
		return &ValidationError{Name: "genesis_fee", err: errors.New(`ent: missing required field "Inscription.genesis_fee"`)}
	}
	if _, ok := ic.mutation.GenesisTx(); !ok {
		return &ValidationError{Name: "genesis_tx", err: errors.New(`ent: missing required field "Inscription.genesis_tx"`)}
	}
	if _, ok := ic.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "Inscription.location"`)}
	}
	if _, ok := ic.mutation.Output(); !ok {
		return &ValidationError{Name: "output", err: errors.New(`ent: missing required field "Inscription.output"`)}
	}
	if _, ok := ic.mutation.Offset(); !ok {
		return &ValidationError{Name: "offset", err: errors.New(`ent: missing required field "Inscription.offset"`)}
	}
	return nil
}

func (ic *InscriptionCreate) sqlSave(ctx context.Context) (*Inscription, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InscriptionCreate) createSpec() (*Inscription, *sqlgraph.CreateSpec) {
	var (
		_node = &Inscription{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(inscription.Table, sqlgraph.NewFieldSpec(inscription.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ic.conflict
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(inscription.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(inscription.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.InscriptionID(); ok {
		_spec.SetField(inscription.FieldInscriptionID, field.TypeInt64, value)
		_node.InscriptionID = value
	}
	if value, ok := ic.mutation.UID(); ok {
		_spec.SetField(inscription.FieldUID, field.TypeString, value)
		_node.UID = value
	}
	if value, ok := ic.mutation.Address(); ok {
		_spec.SetField(inscription.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := ic.mutation.OutputValue(); ok {
		_spec.SetField(inscription.FieldOutputValue, field.TypeUint64, value)
		_node.OutputValue = value
	}
	if value, ok := ic.mutation.ContentLength(); ok {
		_spec.SetField(inscription.FieldContentLength, field.TypeUint64, value)
		_node.ContentLength = value
	}
	if value, ok := ic.mutation.ContentType(); ok {
		_spec.SetField(inscription.FieldContentType, field.TypeString, value)
		_node.ContentType = value
	}
	if value, ok := ic.mutation.Timestamp(); ok {
		_spec.SetField(inscription.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := ic.mutation.GenesisHeight(); ok {
		_spec.SetField(inscription.FieldGenesisHeight, field.TypeUint64, value)
		_node.GenesisHeight = value
	}
	if value, ok := ic.mutation.GenesisFee(); ok {
		_spec.SetField(inscription.FieldGenesisFee, field.TypeUint64, value)
		_node.GenesisFee = value
	}
	if value, ok := ic.mutation.GenesisTx(); ok {
		_spec.SetField(inscription.FieldGenesisTx, field.TypeString, value)
		_node.GenesisTx = value
	}
	if value, ok := ic.mutation.Location(); ok {
		_spec.SetField(inscription.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := ic.mutation.Output(); ok {
		_spec.SetField(inscription.FieldOutput, field.TypeString, value)
		_node.Output = value
	}
	if value, ok := ic.mutation.Offset(); ok {
		_spec.SetField(inscription.FieldOffset, field.TypeUint64, value)
		_node.Offset = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Inscription.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InscriptionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ic *InscriptionCreate) OnConflict(opts ...sql.ConflictOption) *InscriptionUpsertOne {
	ic.conflict = opts
	return &InscriptionUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Inscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *InscriptionCreate) OnConflictColumns(columns ...string) *InscriptionUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &InscriptionUpsertOne{
		create: ic,
	}
}

type (
	// InscriptionUpsertOne is the builder for "upsert"-ing
	//  one Inscription node.
	InscriptionUpsertOne struct {
		create *InscriptionCreate
	}

	// InscriptionUpsert is the "OnConflict" setter.
	InscriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *InscriptionUpsert) SetUpdatedAt(v time.Time) *InscriptionUpsert {
	u.Set(inscription.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InscriptionUpsert) UpdateUpdatedAt() *InscriptionUpsert {
	u.SetExcluded(inscription.FieldUpdatedAt)
	return u
}

// SetInscriptionID sets the "inscription_id" field.
func (u *InscriptionUpsert) SetInscriptionID(v int64) *InscriptionUpsert {
	u.Set(inscription.FieldInscriptionID, v)
	return u
}

// UpdateInscriptionID sets the "inscription_id" field to the value that was provided on create.
func (u *InscriptionUpsert) UpdateInscriptionID() *InscriptionUpsert {
	u.SetExcluded(inscription.FieldInscriptionID)
	return u
}

// AddInscriptionID adds v to the "inscription_id" field.
func (u *InscriptionUpsert) AddInscriptionID(v int64) *InscriptionUpsert {
	u.Add(inscription.FieldInscriptionID, v)
	return u
}

// SetUID sets the "uid" field.
func (u *InscriptionUpsert) SetUID(v string) *InscriptionUpsert {
	u.Set(inscription.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *InscriptionUpsert) UpdateUID() *InscriptionUpsert {
	u.SetExcluded(inscription.FieldUID)
	return u
}

// SetAddress sets the "address" field.
func (u *InscriptionUpsert) SetAddress(v string) *InscriptionUpsert {
	u.Set(inscription.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *InscriptionUpsert) UpdateAddress() *InscriptionUpsert {
	u.SetExcluded(inscription.FieldAddress)
	return u
}

// SetOutputValue sets the "output_value" field.
func (u *InscriptionUpsert) SetOutputValue(v uint64) *InscriptionUpsert {
	u.Set(inscription.FieldOutputValue, v)
	return u
}

// UpdateOutputValue sets the "output_value" field to the value that was provided on create.
func (u *InscriptionUpsert) UpdateOutputValue() *InscriptionUpsert {
	u.SetExcluded(inscription.FieldOutputValue)
	return u
}

// AddOutputValue adds v to the "output_value" field.
func (u *InscriptionUpsert) AddOutputValue(v uint64) *InscriptionUpsert {
	u.Add(inscription.FieldOutputValue, v)
	return u
}

// SetContentLength sets the "content_length" field.
func (u *InscriptionUpsert) SetContentLength(v uint64) *InscriptionUpsert {
	u.Set(inscription.FieldContentLength, v)
	return u
}

// UpdateContentLength sets the "content_length" field to the value that was provided on create.
func (u *InscriptionUpsert) UpdateContentLength() *InscriptionUpsert {
	u.SetExcluded(inscription.FieldContentLength)
	return u
}

// AddContentLength adds v to the "content_length" field.
func (u *InscriptionUpsert) AddContentLength(v uint64) *InscriptionUpsert {
	u.Add(inscription.FieldContentLength, v)
	return u
}

// SetContentType sets the "content_type" field.
func (u *InscriptionUpsert) SetContentType(v string) *InscriptionUpsert {
	u.Set(inscription.FieldContentType, v)
	return u
}

// UpdateContentType sets the "content_type" field to the value that was provided on create.
func (u *InscriptionUpsert) UpdateContentType() *InscriptionUpsert {
	u.SetExcluded(inscription.FieldContentType)
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *InscriptionUpsert) SetTimestamp(v time.Time) *InscriptionUpsert {
	u.Set(inscription.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *InscriptionUpsert) UpdateTimestamp() *InscriptionUpsert {
	u.SetExcluded(inscription.FieldTimestamp)
	return u
}

// SetGenesisHeight sets the "genesis_height" field.
func (u *InscriptionUpsert) SetGenesisHeight(v uint64) *InscriptionUpsert {
	u.Set(inscription.FieldGenesisHeight, v)
	return u
}

// UpdateGenesisHeight sets the "genesis_height" field to the value that was provided on create.
func (u *InscriptionUpsert) UpdateGenesisHeight() *InscriptionUpsert {
	u.SetExcluded(inscription.FieldGenesisHeight)
	return u
}

// AddGenesisHeight adds v to the "genesis_height" field.
func (u *InscriptionUpsert) AddGenesisHeight(v uint64) *InscriptionUpsert {
	u.Add(inscription.FieldGenesisHeight, v)
	return u
}

// SetGenesisFee sets the "genesis_fee" field.
func (u *InscriptionUpsert) SetGenesisFee(v uint64) *InscriptionUpsert {
	u.Set(inscription.FieldGenesisFee, v)
	return u
}

// UpdateGenesisFee sets the "genesis_fee" field to the value that was provided on create.
func (u *InscriptionUpsert) UpdateGenesisFee() *InscriptionUpsert {
	u.SetExcluded(inscription.FieldGenesisFee)
	return u
}

// AddGenesisFee adds v to the "genesis_fee" field.
func (u *InscriptionUpsert) AddGenesisFee(v uint64) *InscriptionUpsert {
	u.Add(inscription.FieldGenesisFee, v)
	return u
}

// SetGenesisTx sets the "genesis_tx" field.
func (u *InscriptionUpsert) SetGenesisTx(v string) *InscriptionUpsert {
	u.Set(inscription.FieldGenesisTx, v)
	return u
}

// UpdateGenesisTx sets the "genesis_tx" field to the value that was provided on create.
func (u *InscriptionUpsert) UpdateGenesisTx() *InscriptionUpsert {
	u.SetExcluded(inscription.FieldGenesisTx)
	return u
}

// SetLocation sets the "location" field.
func (u *InscriptionUpsert) SetLocation(v string) *InscriptionUpsert {
	u.Set(inscription.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *InscriptionUpsert) UpdateLocation() *InscriptionUpsert {
	u.SetExcluded(inscription.FieldLocation)
	return u
}

// SetOutput sets the "output" field.
func (u *InscriptionUpsert) SetOutput(v string) *InscriptionUpsert {
	u.Set(inscription.FieldOutput, v)
	return u
}

// UpdateOutput sets the "output" field to the value that was provided on create.
func (u *InscriptionUpsert) UpdateOutput() *InscriptionUpsert {
	u.SetExcluded(inscription.FieldOutput)
	return u
}

// SetOffset sets the "offset" field.
func (u *InscriptionUpsert) SetOffset(v uint64) *InscriptionUpsert {
	u.Set(inscription.FieldOffset, v)
	return u
}

// UpdateOffset sets the "offset" field to the value that was provided on create.
func (u *InscriptionUpsert) UpdateOffset() *InscriptionUpsert {
	u.SetExcluded(inscription.FieldOffset)
	return u
}

// AddOffset adds v to the "offset" field.
func (u *InscriptionUpsert) AddOffset(v uint64) *InscriptionUpsert {
	u.Add(inscription.FieldOffset, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Inscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *InscriptionUpsertOne) UpdateNewValues() *InscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(inscription.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Inscription.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InscriptionUpsertOne) Ignore() *InscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InscriptionUpsertOne) DoNothing() *InscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InscriptionCreate.OnConflict
// documentation for more info.
func (u *InscriptionUpsertOne) Update(set func(*InscriptionUpsert)) *InscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InscriptionUpsertOne) SetUpdatedAt(v time.Time) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InscriptionUpsertOne) UpdateUpdatedAt() *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetInscriptionID sets the "inscription_id" field.
func (u *InscriptionUpsertOne) SetInscriptionID(v int64) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetInscriptionID(v)
	})
}

// AddInscriptionID adds v to the "inscription_id" field.
func (u *InscriptionUpsertOne) AddInscriptionID(v int64) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.AddInscriptionID(v)
	})
}

// UpdateInscriptionID sets the "inscription_id" field to the value that was provided on create.
func (u *InscriptionUpsertOne) UpdateInscriptionID() *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateInscriptionID()
	})
}

// SetUID sets the "uid" field.
func (u *InscriptionUpsertOne) SetUID(v string) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *InscriptionUpsertOne) UpdateUID() *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateUID()
	})
}

// SetAddress sets the "address" field.
func (u *InscriptionUpsertOne) SetAddress(v string) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *InscriptionUpsertOne) UpdateAddress() *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateAddress()
	})
}

// SetOutputValue sets the "output_value" field.
func (u *InscriptionUpsertOne) SetOutputValue(v uint64) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetOutputValue(v)
	})
}

// AddOutputValue adds v to the "output_value" field.
func (u *InscriptionUpsertOne) AddOutputValue(v uint64) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.AddOutputValue(v)
	})
}

// UpdateOutputValue sets the "output_value" field to the value that was provided on create.
func (u *InscriptionUpsertOne) UpdateOutputValue() *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateOutputValue()
	})
}

// SetContentLength sets the "content_length" field.
func (u *InscriptionUpsertOne) SetContentLength(v uint64) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetContentLength(v)
	})
}

// AddContentLength adds v to the "content_length" field.
func (u *InscriptionUpsertOne) AddContentLength(v uint64) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.AddContentLength(v)
	})
}

// UpdateContentLength sets the "content_length" field to the value that was provided on create.
func (u *InscriptionUpsertOne) UpdateContentLength() *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateContentLength()
	})
}

// SetContentType sets the "content_type" field.
func (u *InscriptionUpsertOne) SetContentType(v string) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetContentType(v)
	})
}

// UpdateContentType sets the "content_type" field to the value that was provided on create.
func (u *InscriptionUpsertOne) UpdateContentType() *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateContentType()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *InscriptionUpsertOne) SetTimestamp(v time.Time) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *InscriptionUpsertOne) UpdateTimestamp() *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateTimestamp()
	})
}

// SetGenesisHeight sets the "genesis_height" field.
func (u *InscriptionUpsertOne) SetGenesisHeight(v uint64) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetGenesisHeight(v)
	})
}

// AddGenesisHeight adds v to the "genesis_height" field.
func (u *InscriptionUpsertOne) AddGenesisHeight(v uint64) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.AddGenesisHeight(v)
	})
}

// UpdateGenesisHeight sets the "genesis_height" field to the value that was provided on create.
func (u *InscriptionUpsertOne) UpdateGenesisHeight() *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateGenesisHeight()
	})
}

// SetGenesisFee sets the "genesis_fee" field.
func (u *InscriptionUpsertOne) SetGenesisFee(v uint64) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetGenesisFee(v)
	})
}

// AddGenesisFee adds v to the "genesis_fee" field.
func (u *InscriptionUpsertOne) AddGenesisFee(v uint64) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.AddGenesisFee(v)
	})
}

// UpdateGenesisFee sets the "genesis_fee" field to the value that was provided on create.
func (u *InscriptionUpsertOne) UpdateGenesisFee() *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateGenesisFee()
	})
}

// SetGenesisTx sets the "genesis_tx" field.
func (u *InscriptionUpsertOne) SetGenesisTx(v string) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetGenesisTx(v)
	})
}

// UpdateGenesisTx sets the "genesis_tx" field to the value that was provided on create.
func (u *InscriptionUpsertOne) UpdateGenesisTx() *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateGenesisTx()
	})
}

// SetLocation sets the "location" field.
func (u *InscriptionUpsertOne) SetLocation(v string) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *InscriptionUpsertOne) UpdateLocation() *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateLocation()
	})
}

// SetOutput sets the "output" field.
func (u *InscriptionUpsertOne) SetOutput(v string) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetOutput(v)
	})
}

// UpdateOutput sets the "output" field to the value that was provided on create.
func (u *InscriptionUpsertOne) UpdateOutput() *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateOutput()
	})
}

// SetOffset sets the "offset" field.
func (u *InscriptionUpsertOne) SetOffset(v uint64) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetOffset(v)
	})
}

// AddOffset adds v to the "offset" field.
func (u *InscriptionUpsertOne) AddOffset(v uint64) *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.AddOffset(v)
	})
}

// UpdateOffset sets the "offset" field to the value that was provided on create.
func (u *InscriptionUpsertOne) UpdateOffset() *InscriptionUpsertOne {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateOffset()
	})
}

// Exec executes the query.
func (u *InscriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InscriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InscriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InscriptionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InscriptionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InscriptionCreateBulk is the builder for creating many Inscription entities in bulk.
type InscriptionCreateBulk struct {
	config
	builders []*InscriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the Inscription entities in the database.
func (icb *InscriptionCreateBulk) Save(ctx context.Context) ([]*Inscription, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Inscription, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InscriptionCreateBulk) SaveX(ctx context.Context) []*Inscription {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Inscription.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InscriptionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (icb *InscriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *InscriptionUpsertBulk {
	icb.conflict = opts
	return &InscriptionUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Inscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *InscriptionCreateBulk) OnConflictColumns(columns ...string) *InscriptionUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &InscriptionUpsertBulk{
		create: icb,
	}
}

// InscriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of Inscription nodes.
type InscriptionUpsertBulk struct {
	create *InscriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Inscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *InscriptionUpsertBulk) UpdateNewValues() *InscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(inscription.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Inscription.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InscriptionUpsertBulk) Ignore() *InscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InscriptionUpsertBulk) DoNothing() *InscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InscriptionCreateBulk.OnConflict
// documentation for more info.
func (u *InscriptionUpsertBulk) Update(set func(*InscriptionUpsert)) *InscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InscriptionUpsertBulk) SetUpdatedAt(v time.Time) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InscriptionUpsertBulk) UpdateUpdatedAt() *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetInscriptionID sets the "inscription_id" field.
func (u *InscriptionUpsertBulk) SetInscriptionID(v int64) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetInscriptionID(v)
	})
}

// AddInscriptionID adds v to the "inscription_id" field.
func (u *InscriptionUpsertBulk) AddInscriptionID(v int64) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.AddInscriptionID(v)
	})
}

// UpdateInscriptionID sets the "inscription_id" field to the value that was provided on create.
func (u *InscriptionUpsertBulk) UpdateInscriptionID() *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateInscriptionID()
	})
}

// SetUID sets the "uid" field.
func (u *InscriptionUpsertBulk) SetUID(v string) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *InscriptionUpsertBulk) UpdateUID() *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateUID()
	})
}

// SetAddress sets the "address" field.
func (u *InscriptionUpsertBulk) SetAddress(v string) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *InscriptionUpsertBulk) UpdateAddress() *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateAddress()
	})
}

// SetOutputValue sets the "output_value" field.
func (u *InscriptionUpsertBulk) SetOutputValue(v uint64) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetOutputValue(v)
	})
}

// AddOutputValue adds v to the "output_value" field.
func (u *InscriptionUpsertBulk) AddOutputValue(v uint64) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.AddOutputValue(v)
	})
}

// UpdateOutputValue sets the "output_value" field to the value that was provided on create.
func (u *InscriptionUpsertBulk) UpdateOutputValue() *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateOutputValue()
	})
}

// SetContentLength sets the "content_length" field.
func (u *InscriptionUpsertBulk) SetContentLength(v uint64) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetContentLength(v)
	})
}

// AddContentLength adds v to the "content_length" field.
func (u *InscriptionUpsertBulk) AddContentLength(v uint64) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.AddContentLength(v)
	})
}

// UpdateContentLength sets the "content_length" field to the value that was provided on create.
func (u *InscriptionUpsertBulk) UpdateContentLength() *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateContentLength()
	})
}

// SetContentType sets the "content_type" field.
func (u *InscriptionUpsertBulk) SetContentType(v string) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetContentType(v)
	})
}

// UpdateContentType sets the "content_type" field to the value that was provided on create.
func (u *InscriptionUpsertBulk) UpdateContentType() *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateContentType()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *InscriptionUpsertBulk) SetTimestamp(v time.Time) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *InscriptionUpsertBulk) UpdateTimestamp() *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateTimestamp()
	})
}

// SetGenesisHeight sets the "genesis_height" field.
func (u *InscriptionUpsertBulk) SetGenesisHeight(v uint64) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetGenesisHeight(v)
	})
}

// AddGenesisHeight adds v to the "genesis_height" field.
func (u *InscriptionUpsertBulk) AddGenesisHeight(v uint64) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.AddGenesisHeight(v)
	})
}

// UpdateGenesisHeight sets the "genesis_height" field to the value that was provided on create.
func (u *InscriptionUpsertBulk) UpdateGenesisHeight() *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateGenesisHeight()
	})
}

// SetGenesisFee sets the "genesis_fee" field.
func (u *InscriptionUpsertBulk) SetGenesisFee(v uint64) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetGenesisFee(v)
	})
}

// AddGenesisFee adds v to the "genesis_fee" field.
func (u *InscriptionUpsertBulk) AddGenesisFee(v uint64) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.AddGenesisFee(v)
	})
}

// UpdateGenesisFee sets the "genesis_fee" field to the value that was provided on create.
func (u *InscriptionUpsertBulk) UpdateGenesisFee() *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateGenesisFee()
	})
}

// SetGenesisTx sets the "genesis_tx" field.
func (u *InscriptionUpsertBulk) SetGenesisTx(v string) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetGenesisTx(v)
	})
}

// UpdateGenesisTx sets the "genesis_tx" field to the value that was provided on create.
func (u *InscriptionUpsertBulk) UpdateGenesisTx() *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateGenesisTx()
	})
}

// SetLocation sets the "location" field.
func (u *InscriptionUpsertBulk) SetLocation(v string) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *InscriptionUpsertBulk) UpdateLocation() *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateLocation()
	})
}

// SetOutput sets the "output" field.
func (u *InscriptionUpsertBulk) SetOutput(v string) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetOutput(v)
	})
}

// UpdateOutput sets the "output" field to the value that was provided on create.
func (u *InscriptionUpsertBulk) UpdateOutput() *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateOutput()
	})
}

// SetOffset sets the "offset" field.
func (u *InscriptionUpsertBulk) SetOffset(v uint64) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.SetOffset(v)
	})
}

// AddOffset adds v to the "offset" field.
func (u *InscriptionUpsertBulk) AddOffset(v uint64) *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.AddOffset(v)
	})
}

// UpdateOffset sets the "offset" field to the value that was provided on create.
func (u *InscriptionUpsertBulk) UpdateOffset() *InscriptionUpsertBulk {
	return u.Update(func(s *InscriptionUpsert) {
		s.UpdateOffset()
	})
}

// Exec executes the query.
func (u *InscriptionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InscriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InscriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InscriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
