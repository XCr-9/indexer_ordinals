// Code generated by ent, DO NOT EDIT.

package collection

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the collection type in the database.
	Label = "collection"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTick holds the string denoting the tick field in the database.
	FieldTick = "tick"
	// FieldP holds the string denoting the p field in the database.
	FieldP = "p"
	// FieldMax holds the string denoting the max field in the database.
	FieldMax = "max"
	// FieldSupply holds the string denoting the supply field in the database.
	FieldSupply = "supply"
	// FieldBaseURI holds the string denoting the base_uri field in the database.
	FieldBaseURI = "base_uri"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldAttributes holds the string denoting the attributes field in the database.
	FieldAttributes = "attributes"
	// FieldTxHash holds the string denoting the tx_hash field in the database.
	FieldTxHash = "tx_hash"
	// FieldBlockHeight holds the string denoting the block_height field in the database.
	FieldBlockHeight = "block_height"
	// FieldBlockTime holds the string denoting the block_time field in the database.
	FieldBlockTime = "block_time"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldInscriptionID holds the string denoting the inscription_id field in the database.
	FieldInscriptionID = "inscription_id"
	// FieldInscriptionUID holds the string denoting the inscription_uid field in the database.
	FieldInscriptionUID = "inscription_uid"
	// EdgeTokens holds the string denoting the tokens edge name in mutations.
	EdgeTokens = "tokens"
	// Table holds the table name of the collection in the database.
	Table = "collections"
	// TokensTable is the table that holds the tokens relation/edge.
	TokensTable = "tokens"
	// TokensInverseTable is the table name for the Token entity.
	// It exists in this package in order to avoid circular dependency with the "token" package.
	TokensInverseTable = "tokens"
	// TokensColumn is the table column denoting the tokens relation/edge.
	TokensColumn = "collection_tokens"
)

// Columns holds all SQL columns for collection fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTick,
	FieldP,
	FieldMax,
	FieldSupply,
	FieldBaseURI,
	FieldName,
	FieldDescription,
	FieldImage,
	FieldAttributes,
	FieldTxHash,
	FieldBlockHeight,
	FieldBlockTime,
	FieldAddress,
	FieldInscriptionID,
	FieldInscriptionUID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultP holds the default value on creation for the "p" field.
	DefaultP string
)

// OrderOption defines the ordering options for the Collection queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTick orders the results by the tick field.
func ByTick(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTick, opts...).ToFunc()
}

// ByP orders the results by the p field.
func ByP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldP, opts...).ToFunc()
}

// ByMax orders the results by the max field.
func ByMax(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMax, opts...).ToFunc()
}

// BySupply orders the results by the supply field.
func BySupply(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSupply, opts...).ToFunc()
}

// ByBaseURI orders the results by the base_uri field.
func ByBaseURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaseURI, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByTxHash orders the results by the tx_hash field.
func ByTxHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxHash, opts...).ToFunc()
}

// ByBlockHeight orders the results by the block_height field.
func ByBlockHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockHeight, opts...).ToFunc()
}

// ByBlockTime orders the results by the block_time field.
func ByBlockTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockTime, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByInscriptionID orders the results by the inscription_id field.
func ByInscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInscriptionID, opts...).ToFunc()
}

// ByInscriptionUID orders the results by the inscription_uid field.
func ByInscriptionUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInscriptionUID, opts...).ToFunc()
}

// ByTokensCount orders the results by tokens count.
func ByTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTokensStep(), opts...)
	}
}

// ByTokens orders the results by tokens terms.
func ByTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TokensTable, TokensColumn),
	)
}
