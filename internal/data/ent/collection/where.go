// Code generated by ent, DO NOT EDIT.

package collection

import (
	"github.com/adshao/ordinals-indexer/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldUpdatedAt, v))
}

// Tick applies equality check predicate on the "tick" field. It's identical to TickEQ.
func Tick(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldTick, v))
}

// P applies equality check predicate on the "p" field. It's identical to PEQ.
func P(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldP, v))
}

// Max applies equality check predicate on the "max" field. It's identical to MaxEQ.
func Max(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldMax, v))
}

// Supply applies equality check predicate on the "supply" field. It's identical to SupplyEQ.
func Supply(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldSupply, v))
}

// BaseURI applies equality check predicate on the "base_uri" field. It's identical to BaseURIEQ.
func BaseURI(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldBaseURI, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldDescription, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldImage, v))
}

// TxHash applies equality check predicate on the "tx_hash" field. It's identical to TxHashEQ.
func TxHash(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldTxHash, v))
}

// BlockHeight applies equality check predicate on the "block_height" field. It's identical to BlockHeightEQ.
func BlockHeight(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldBlockHeight, v))
}

// BlockTime applies equality check predicate on the "block_time" field. It's identical to BlockTimeEQ.
func BlockTime(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldBlockTime, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldAddress, v))
}

// InscriptionID applies equality check predicate on the "inscription_id" field. It's identical to InscriptionIDEQ.
func InscriptionID(v int64) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldInscriptionID, v))
}

// InscriptionUID applies equality check predicate on the "inscription_uid" field. It's identical to InscriptionUIDEQ.
func InscriptionUID(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldInscriptionUID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldUpdatedAt, v))
}

// TickEQ applies the EQ predicate on the "tick" field.
func TickEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldTick, v))
}

// TickNEQ applies the NEQ predicate on the "tick" field.
func TickNEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldTick, v))
}

// TickIn applies the In predicate on the "tick" field.
func TickIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldTick, vs...))
}

// TickNotIn applies the NotIn predicate on the "tick" field.
func TickNotIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldTick, vs...))
}

// TickGT applies the GT predicate on the "tick" field.
func TickGT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldTick, v))
}

// TickGTE applies the GTE predicate on the "tick" field.
func TickGTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldTick, v))
}

// TickLT applies the LT predicate on the "tick" field.
func TickLT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldTick, v))
}

// TickLTE applies the LTE predicate on the "tick" field.
func TickLTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldTick, v))
}

// TickContains applies the Contains predicate on the "tick" field.
func TickContains(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContains(FieldTick, v))
}

// TickHasPrefix applies the HasPrefix predicate on the "tick" field.
func TickHasPrefix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasPrefix(FieldTick, v))
}

// TickHasSuffix applies the HasSuffix predicate on the "tick" field.
func TickHasSuffix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasSuffix(FieldTick, v))
}

// TickEqualFold applies the EqualFold predicate on the "tick" field.
func TickEqualFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEqualFold(FieldTick, v))
}

// TickContainsFold applies the ContainsFold predicate on the "tick" field.
func TickContainsFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContainsFold(FieldTick, v))
}

// PEQ applies the EQ predicate on the "p" field.
func PEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldP, v))
}

// PNEQ applies the NEQ predicate on the "p" field.
func PNEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldP, v))
}

// PIn applies the In predicate on the "p" field.
func PIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldP, vs...))
}

// PNotIn applies the NotIn predicate on the "p" field.
func PNotIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldP, vs...))
}

// PGT applies the GT predicate on the "p" field.
func PGT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldP, v))
}

// PGTE applies the GTE predicate on the "p" field.
func PGTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldP, v))
}

// PLT applies the LT predicate on the "p" field.
func PLT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldP, v))
}

// PLTE applies the LTE predicate on the "p" field.
func PLTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldP, v))
}

// PContains applies the Contains predicate on the "p" field.
func PContains(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContains(FieldP, v))
}

// PHasPrefix applies the HasPrefix predicate on the "p" field.
func PHasPrefix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasPrefix(FieldP, v))
}

// PHasSuffix applies the HasSuffix predicate on the "p" field.
func PHasSuffix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasSuffix(FieldP, v))
}

// PEqualFold applies the EqualFold predicate on the "p" field.
func PEqualFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEqualFold(FieldP, v))
}

// PContainsFold applies the ContainsFold predicate on the "p" field.
func PContainsFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContainsFold(FieldP, v))
}

// MaxEQ applies the EQ predicate on the "max" field.
func MaxEQ(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldMax, v))
}

// MaxNEQ applies the NEQ predicate on the "max" field.
func MaxNEQ(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldMax, v))
}

// MaxIn applies the In predicate on the "max" field.
func MaxIn(vs ...uint64) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldMax, vs...))
}

// MaxNotIn applies the NotIn predicate on the "max" field.
func MaxNotIn(vs ...uint64) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldMax, vs...))
}

// MaxGT applies the GT predicate on the "max" field.
func MaxGT(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldMax, v))
}

// MaxGTE applies the GTE predicate on the "max" field.
func MaxGTE(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldMax, v))
}

// MaxLT applies the LT predicate on the "max" field.
func MaxLT(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldMax, v))
}

// MaxLTE applies the LTE predicate on the "max" field.
func MaxLTE(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldMax, v))
}

// SupplyEQ applies the EQ predicate on the "supply" field.
func SupplyEQ(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldSupply, v))
}

// SupplyNEQ applies the NEQ predicate on the "supply" field.
func SupplyNEQ(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldSupply, v))
}

// SupplyIn applies the In predicate on the "supply" field.
func SupplyIn(vs ...uint64) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldSupply, vs...))
}

// SupplyNotIn applies the NotIn predicate on the "supply" field.
func SupplyNotIn(vs ...uint64) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldSupply, vs...))
}

// SupplyGT applies the GT predicate on the "supply" field.
func SupplyGT(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldSupply, v))
}

// SupplyGTE applies the GTE predicate on the "supply" field.
func SupplyGTE(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldSupply, v))
}

// SupplyLT applies the LT predicate on the "supply" field.
func SupplyLT(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldSupply, v))
}

// SupplyLTE applies the LTE predicate on the "supply" field.
func SupplyLTE(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldSupply, v))
}

// BaseURIEQ applies the EQ predicate on the "base_uri" field.
func BaseURIEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldBaseURI, v))
}

// BaseURINEQ applies the NEQ predicate on the "base_uri" field.
func BaseURINEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldBaseURI, v))
}

// BaseURIIn applies the In predicate on the "base_uri" field.
func BaseURIIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldBaseURI, vs...))
}

// BaseURINotIn applies the NotIn predicate on the "base_uri" field.
func BaseURINotIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldBaseURI, vs...))
}

// BaseURIGT applies the GT predicate on the "base_uri" field.
func BaseURIGT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldBaseURI, v))
}

// BaseURIGTE applies the GTE predicate on the "base_uri" field.
func BaseURIGTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldBaseURI, v))
}

// BaseURILT applies the LT predicate on the "base_uri" field.
func BaseURILT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldBaseURI, v))
}

// BaseURILTE applies the LTE predicate on the "base_uri" field.
func BaseURILTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldBaseURI, v))
}

// BaseURIContains applies the Contains predicate on the "base_uri" field.
func BaseURIContains(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContains(FieldBaseURI, v))
}

// BaseURIHasPrefix applies the HasPrefix predicate on the "base_uri" field.
func BaseURIHasPrefix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasPrefix(FieldBaseURI, v))
}

// BaseURIHasSuffix applies the HasSuffix predicate on the "base_uri" field.
func BaseURIHasSuffix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasSuffix(FieldBaseURI, v))
}

// BaseURIEqualFold applies the EqualFold predicate on the "base_uri" field.
func BaseURIEqualFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEqualFold(FieldBaseURI, v))
}

// BaseURIContainsFold applies the ContainsFold predicate on the "base_uri" field.
func BaseURIContainsFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContainsFold(FieldBaseURI, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContainsFold(FieldDescription, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasSuffix(FieldImage, v))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContainsFold(FieldImage, v))
}

// TxHashEQ applies the EQ predicate on the "tx_hash" field.
func TxHashEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldTxHash, v))
}

// TxHashNEQ applies the NEQ predicate on the "tx_hash" field.
func TxHashNEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldTxHash, v))
}

// TxHashIn applies the In predicate on the "tx_hash" field.
func TxHashIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldTxHash, vs...))
}

// TxHashNotIn applies the NotIn predicate on the "tx_hash" field.
func TxHashNotIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldTxHash, vs...))
}

// TxHashGT applies the GT predicate on the "tx_hash" field.
func TxHashGT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldTxHash, v))
}

// TxHashGTE applies the GTE predicate on the "tx_hash" field.
func TxHashGTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldTxHash, v))
}

// TxHashLT applies the LT predicate on the "tx_hash" field.
func TxHashLT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldTxHash, v))
}

// TxHashLTE applies the LTE predicate on the "tx_hash" field.
func TxHashLTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldTxHash, v))
}

// TxHashContains applies the Contains predicate on the "tx_hash" field.
func TxHashContains(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContains(FieldTxHash, v))
}

// TxHashHasPrefix applies the HasPrefix predicate on the "tx_hash" field.
func TxHashHasPrefix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasPrefix(FieldTxHash, v))
}

// TxHashHasSuffix applies the HasSuffix predicate on the "tx_hash" field.
func TxHashHasSuffix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasSuffix(FieldTxHash, v))
}

// TxHashEqualFold applies the EqualFold predicate on the "tx_hash" field.
func TxHashEqualFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEqualFold(FieldTxHash, v))
}

// TxHashContainsFold applies the ContainsFold predicate on the "tx_hash" field.
func TxHashContainsFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContainsFold(FieldTxHash, v))
}

// BlockHeightEQ applies the EQ predicate on the "block_height" field.
func BlockHeightEQ(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldBlockHeight, v))
}

// BlockHeightNEQ applies the NEQ predicate on the "block_height" field.
func BlockHeightNEQ(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldBlockHeight, v))
}

// BlockHeightIn applies the In predicate on the "block_height" field.
func BlockHeightIn(vs ...uint64) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldBlockHeight, vs...))
}

// BlockHeightNotIn applies the NotIn predicate on the "block_height" field.
func BlockHeightNotIn(vs ...uint64) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldBlockHeight, vs...))
}

// BlockHeightGT applies the GT predicate on the "block_height" field.
func BlockHeightGT(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldBlockHeight, v))
}

// BlockHeightGTE applies the GTE predicate on the "block_height" field.
func BlockHeightGTE(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldBlockHeight, v))
}

// BlockHeightLT applies the LT predicate on the "block_height" field.
func BlockHeightLT(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldBlockHeight, v))
}

// BlockHeightLTE applies the LTE predicate on the "block_height" field.
func BlockHeightLTE(v uint64) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldBlockHeight, v))
}

// BlockTimeEQ applies the EQ predicate on the "block_time" field.
func BlockTimeEQ(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldBlockTime, v))
}

// BlockTimeNEQ applies the NEQ predicate on the "block_time" field.
func BlockTimeNEQ(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldBlockTime, v))
}

// BlockTimeIn applies the In predicate on the "block_time" field.
func BlockTimeIn(vs ...time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldBlockTime, vs...))
}

// BlockTimeNotIn applies the NotIn predicate on the "block_time" field.
func BlockTimeNotIn(vs ...time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldBlockTime, vs...))
}

// BlockTimeGT applies the GT predicate on the "block_time" field.
func BlockTimeGT(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldBlockTime, v))
}

// BlockTimeGTE applies the GTE predicate on the "block_time" field.
func BlockTimeGTE(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldBlockTime, v))
}

// BlockTimeLT applies the LT predicate on the "block_time" field.
func BlockTimeLT(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldBlockTime, v))
}

// BlockTimeLTE applies the LTE predicate on the "block_time" field.
func BlockTimeLTE(v time.Time) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldBlockTime, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContainsFold(FieldAddress, v))
}

// InscriptionIDEQ applies the EQ predicate on the "inscription_id" field.
func InscriptionIDEQ(v int64) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldInscriptionID, v))
}

// InscriptionIDNEQ applies the NEQ predicate on the "inscription_id" field.
func InscriptionIDNEQ(v int64) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldInscriptionID, v))
}

// InscriptionIDIn applies the In predicate on the "inscription_id" field.
func InscriptionIDIn(vs ...int64) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldInscriptionID, vs...))
}

// InscriptionIDNotIn applies the NotIn predicate on the "inscription_id" field.
func InscriptionIDNotIn(vs ...int64) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldInscriptionID, vs...))
}

// InscriptionIDGT applies the GT predicate on the "inscription_id" field.
func InscriptionIDGT(v int64) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldInscriptionID, v))
}

// InscriptionIDGTE applies the GTE predicate on the "inscription_id" field.
func InscriptionIDGTE(v int64) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldInscriptionID, v))
}

// InscriptionIDLT applies the LT predicate on the "inscription_id" field.
func InscriptionIDLT(v int64) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldInscriptionID, v))
}

// InscriptionIDLTE applies the LTE predicate on the "inscription_id" field.
func InscriptionIDLTE(v int64) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldInscriptionID, v))
}

// InscriptionUIDEQ applies the EQ predicate on the "inscription_uid" field.
func InscriptionUIDEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldInscriptionUID, v))
}

// InscriptionUIDNEQ applies the NEQ predicate on the "inscription_uid" field.
func InscriptionUIDNEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldInscriptionUID, v))
}

// InscriptionUIDIn applies the In predicate on the "inscription_uid" field.
func InscriptionUIDIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldInscriptionUID, vs...))
}

// InscriptionUIDNotIn applies the NotIn predicate on the "inscription_uid" field.
func InscriptionUIDNotIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldInscriptionUID, vs...))
}

// InscriptionUIDGT applies the GT predicate on the "inscription_uid" field.
func InscriptionUIDGT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldInscriptionUID, v))
}

// InscriptionUIDGTE applies the GTE predicate on the "inscription_uid" field.
func InscriptionUIDGTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldInscriptionUID, v))
}

// InscriptionUIDLT applies the LT predicate on the "inscription_uid" field.
func InscriptionUIDLT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldInscriptionUID, v))
}

// InscriptionUIDLTE applies the LTE predicate on the "inscription_uid" field.
func InscriptionUIDLTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldInscriptionUID, v))
}

// InscriptionUIDContains applies the Contains predicate on the "inscription_uid" field.
func InscriptionUIDContains(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContains(FieldInscriptionUID, v))
}

// InscriptionUIDHasPrefix applies the HasPrefix predicate on the "inscription_uid" field.
func InscriptionUIDHasPrefix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasPrefix(FieldInscriptionUID, v))
}

// InscriptionUIDHasSuffix applies the HasSuffix predicate on the "inscription_uid" field.
func InscriptionUIDHasSuffix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasSuffix(FieldInscriptionUID, v))
}

// InscriptionUIDEqualFold applies the EqualFold predicate on the "inscription_uid" field.
func InscriptionUIDEqualFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEqualFold(FieldInscriptionUID, v))
}

// InscriptionUIDContainsFold applies the ContainsFold predicate on the "inscription_uid" field.
func InscriptionUIDContainsFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContainsFold(FieldInscriptionUID, v))
}

// HasTokens applies the HasEdge predicate on the "tokens" edge.
func HasTokens() predicate.Collection {
	return predicate.Collection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TokensTable, TokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokensWith applies the HasEdge predicate on the "tokens" edge with a given conditions (other predicates).
func HasTokensWith(preds ...predicate.Token) predicate.Collection {
	return predicate.Collection(func(s *sql.Selector) {
		step := newTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Collection) predicate.Collection {
	return predicate.Collection(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Collection) predicate.Collection {
	return predicate.Collection(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Collection) predicate.Collection {
	return predicate.Collection(func(s *sql.Selector) {
		p(s.Not())
	})
}
