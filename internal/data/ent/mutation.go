// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/adshao/ordinals-indexer/internal/data/ent/collection"
	"github.com/adshao/ordinals-indexer/internal/data/ent/inscription"
	"github.com/adshao/ordinals-indexer/internal/data/ent/predicate"
	"github.com/adshao/ordinals-indexer/internal/data/ent/token"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCollection  = "Collection"
	TypeInscription = "Inscription"
	TypeToken       = "Token"
)

// CollectionMutation represents an operation that mutates the Collection nodes in the graph.
type CollectionMutation struct {
	config
	op                Op
	typ               string
	id                *int
	created_at        *time.Time
	updated_at        *time.Time
	tick              *string
	p                 *string
	max               *uint64
	addmax            *int64
	supply            *uint64
	addsupply         *int64
	base_uri          *string
	name              *string
	description       *string
	image             *string
	attributes        *[]map[string]interface{}
	appendattributes  []map[string]interface{}
	tx_hash           *string
	block_height      *uint64
	addblock_height   *int64
	block_time        *time.Time
	address           *string
	inscription_id    *int64
	addinscription_id *int64
	inscription_uid   *string
	clearedFields     map[string]struct{}
	tokens            map[int]struct{}
	removedtokens     map[int]struct{}
	clearedtokens     bool
	done              bool
	oldValue          func(context.Context) (*Collection, error)
	predicates        []predicate.Collection
}

var _ ent.Mutation = (*CollectionMutation)(nil)

// collectionOption allows management of the mutation configuration using functional options.
type collectionOption func(*CollectionMutation)

// newCollectionMutation creates new mutation for the Collection entity.
func newCollectionMutation(c config, op Op, opts ...collectionOption) *CollectionMutation {
	m := &CollectionMutation{
		config:        c,
		op:            op,
		typ:           TypeCollection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCollectionID sets the ID field of the mutation.
func withCollectionID(id int) collectionOption {
	return func(m *CollectionMutation) {
		var (
			err   error
			once  sync.Once
			value *Collection
		)
		m.oldValue = func(ctx context.Context) (*Collection, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Collection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCollection sets the old Collection of the mutation.
func withCollection(node *Collection) collectionOption {
	return func(m *CollectionMutation) {
		m.oldValue = func(context.Context) (*Collection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CollectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CollectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CollectionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CollectionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Collection.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CollectionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CollectionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CollectionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CollectionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CollectionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CollectionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTick sets the "tick" field.
func (m *CollectionMutation) SetTick(s string) {
	m.tick = &s
}

// Tick returns the value of the "tick" field in the mutation.
func (m *CollectionMutation) Tick() (r string, exists bool) {
	v := m.tick
	if v == nil {
		return
	}
	return *v, true
}

// OldTick returns the old "tick" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldTick(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTick is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTick requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTick: %w", err)
	}
	return oldValue.Tick, nil
}

// ResetTick resets all changes to the "tick" field.
func (m *CollectionMutation) ResetTick() {
	m.tick = nil
}

// SetP sets the "p" field.
func (m *CollectionMutation) SetP(s string) {
	m.p = &s
}

// P returns the value of the "p" field in the mutation.
func (m *CollectionMutation) P() (r string, exists bool) {
	v := m.p
	if v == nil {
		return
	}
	return *v, true
}

// OldP returns the old "p" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldP: %w", err)
	}
	return oldValue.P, nil
}

// ResetP resets all changes to the "p" field.
func (m *CollectionMutation) ResetP() {
	m.p = nil
}

// SetMax sets the "max" field.
func (m *CollectionMutation) SetMax(u uint64) {
	m.max = &u
	m.addmax = nil
}

// Max returns the value of the "max" field in the mutation.
func (m *CollectionMutation) Max() (r uint64, exists bool) {
	v := m.max
	if v == nil {
		return
	}
	return *v, true
}

// OldMax returns the old "max" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldMax(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMax is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMax requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMax: %w", err)
	}
	return oldValue.Max, nil
}

// AddMax adds u to the "max" field.
func (m *CollectionMutation) AddMax(u int64) {
	if m.addmax != nil {
		*m.addmax += u
	} else {
		m.addmax = &u
	}
}

// AddedMax returns the value that was added to the "max" field in this mutation.
func (m *CollectionMutation) AddedMax() (r int64, exists bool) {
	v := m.addmax
	if v == nil {
		return
	}
	return *v, true
}

// ResetMax resets all changes to the "max" field.
func (m *CollectionMutation) ResetMax() {
	m.max = nil
	m.addmax = nil
}

// SetSupply sets the "supply" field.
func (m *CollectionMutation) SetSupply(u uint64) {
	m.supply = &u
	m.addsupply = nil
}

// Supply returns the value of the "supply" field in the mutation.
func (m *CollectionMutation) Supply() (r uint64, exists bool) {
	v := m.supply
	if v == nil {
		return
	}
	return *v, true
}

// OldSupply returns the old "supply" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldSupply(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSupply is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSupply requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSupply: %w", err)
	}
	return oldValue.Supply, nil
}

// AddSupply adds u to the "supply" field.
func (m *CollectionMutation) AddSupply(u int64) {
	if m.addsupply != nil {
		*m.addsupply += u
	} else {
		m.addsupply = &u
	}
}

// AddedSupply returns the value that was added to the "supply" field in this mutation.
func (m *CollectionMutation) AddedSupply() (r int64, exists bool) {
	v := m.addsupply
	if v == nil {
		return
	}
	return *v, true
}

// ResetSupply resets all changes to the "supply" field.
func (m *CollectionMutation) ResetSupply() {
	m.supply = nil
	m.addsupply = nil
}

// SetBaseURI sets the "base_uri" field.
func (m *CollectionMutation) SetBaseURI(s string) {
	m.base_uri = &s
}

// BaseURI returns the value of the "base_uri" field in the mutation.
func (m *CollectionMutation) BaseURI() (r string, exists bool) {
	v := m.base_uri
	if v == nil {
		return
	}
	return *v, true
}

// OldBaseURI returns the old "base_uri" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldBaseURI(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBaseURI is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBaseURI requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBaseURI: %w", err)
	}
	return oldValue.BaseURI, nil
}

// ResetBaseURI resets all changes to the "base_uri" field.
func (m *CollectionMutation) ResetBaseURI() {
	m.base_uri = nil
}

// SetName sets the "name" field.
func (m *CollectionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CollectionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CollectionMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *CollectionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *CollectionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *CollectionMutation) ResetDescription() {
	m.description = nil
}

// SetImage sets the "image" field.
func (m *CollectionMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *CollectionMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *CollectionMutation) ResetImage() {
	m.image = nil
}

// SetAttributes sets the "attributes" field.
func (m *CollectionMutation) SetAttributes(value []map[string]interface{}) {
	m.attributes = &value
	m.appendattributes = nil
}

// Attributes returns the value of the "attributes" field in the mutation.
func (m *CollectionMutation) Attributes() (r []map[string]interface{}, exists bool) {
	v := m.attributes
	if v == nil {
		return
	}
	return *v, true
}

// OldAttributes returns the old "attributes" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldAttributes(ctx context.Context) (v []map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttributes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttributes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttributes: %w", err)
	}
	return oldValue.Attributes, nil
}

// AppendAttributes adds value to the "attributes" field.
func (m *CollectionMutation) AppendAttributes(value []map[string]interface{}) {
	m.appendattributes = append(m.appendattributes, value...)
}

// AppendedAttributes returns the list of values that were appended to the "attributes" field in this mutation.
func (m *CollectionMutation) AppendedAttributes() ([]map[string]interface{}, bool) {
	if len(m.appendattributes) == 0 {
		return nil, false
	}
	return m.appendattributes, true
}

// ResetAttributes resets all changes to the "attributes" field.
func (m *CollectionMutation) ResetAttributes() {
	m.attributes = nil
	m.appendattributes = nil
}

// SetTxHash sets the "tx_hash" field.
func (m *CollectionMutation) SetTxHash(s string) {
	m.tx_hash = &s
}

// TxHash returns the value of the "tx_hash" field in the mutation.
func (m *CollectionMutation) TxHash() (r string, exists bool) {
	v := m.tx_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTxHash returns the old "tx_hash" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldTxHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxHash: %w", err)
	}
	return oldValue.TxHash, nil
}

// ResetTxHash resets all changes to the "tx_hash" field.
func (m *CollectionMutation) ResetTxHash() {
	m.tx_hash = nil
}

// SetBlockHeight sets the "block_height" field.
func (m *CollectionMutation) SetBlockHeight(u uint64) {
	m.block_height = &u
	m.addblock_height = nil
}

// BlockHeight returns the value of the "block_height" field in the mutation.
func (m *CollectionMutation) BlockHeight() (r uint64, exists bool) {
	v := m.block_height
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockHeight returns the old "block_height" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldBlockHeight(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlockHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlockHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockHeight: %w", err)
	}
	return oldValue.BlockHeight, nil
}

// AddBlockHeight adds u to the "block_height" field.
func (m *CollectionMutation) AddBlockHeight(u int64) {
	if m.addblock_height != nil {
		*m.addblock_height += u
	} else {
		m.addblock_height = &u
	}
}

// AddedBlockHeight returns the value that was added to the "block_height" field in this mutation.
func (m *CollectionMutation) AddedBlockHeight() (r int64, exists bool) {
	v := m.addblock_height
	if v == nil {
		return
	}
	return *v, true
}

// ResetBlockHeight resets all changes to the "block_height" field.
func (m *CollectionMutation) ResetBlockHeight() {
	m.block_height = nil
	m.addblock_height = nil
}

// SetBlockTime sets the "block_time" field.
func (m *CollectionMutation) SetBlockTime(t time.Time) {
	m.block_time = &t
}

// BlockTime returns the value of the "block_time" field in the mutation.
func (m *CollectionMutation) BlockTime() (r time.Time, exists bool) {
	v := m.block_time
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockTime returns the old "block_time" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldBlockTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlockTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlockTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockTime: %w", err)
	}
	return oldValue.BlockTime, nil
}

// ResetBlockTime resets all changes to the "block_time" field.
func (m *CollectionMutation) ResetBlockTime() {
	m.block_time = nil
}

// SetAddress sets the "address" field.
func (m *CollectionMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *CollectionMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *CollectionMutation) ResetAddress() {
	m.address = nil
}

// SetInscriptionID sets the "inscription_id" field.
func (m *CollectionMutation) SetInscriptionID(i int64) {
	m.inscription_id = &i
	m.addinscription_id = nil
}

// InscriptionID returns the value of the "inscription_id" field in the mutation.
func (m *CollectionMutation) InscriptionID() (r int64, exists bool) {
	v := m.inscription_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInscriptionID returns the old "inscription_id" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldInscriptionID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInscriptionID: %w", err)
	}
	return oldValue.InscriptionID, nil
}

// AddInscriptionID adds i to the "inscription_id" field.
func (m *CollectionMutation) AddInscriptionID(i int64) {
	if m.addinscription_id != nil {
		*m.addinscription_id += i
	} else {
		m.addinscription_id = &i
	}
}

// AddedInscriptionID returns the value that was added to the "inscription_id" field in this mutation.
func (m *CollectionMutation) AddedInscriptionID() (r int64, exists bool) {
	v := m.addinscription_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetInscriptionID resets all changes to the "inscription_id" field.
func (m *CollectionMutation) ResetInscriptionID() {
	m.inscription_id = nil
	m.addinscription_id = nil
}

// SetInscriptionUID sets the "inscription_uid" field.
func (m *CollectionMutation) SetInscriptionUID(s string) {
	m.inscription_uid = &s
}

// InscriptionUID returns the value of the "inscription_uid" field in the mutation.
func (m *CollectionMutation) InscriptionUID() (r string, exists bool) {
	v := m.inscription_uid
	if v == nil {
		return
	}
	return *v, true
}

// OldInscriptionUID returns the old "inscription_uid" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldInscriptionUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInscriptionUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInscriptionUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInscriptionUID: %w", err)
	}
	return oldValue.InscriptionUID, nil
}

// ResetInscriptionUID resets all changes to the "inscription_uid" field.
func (m *CollectionMutation) ResetInscriptionUID() {
	m.inscription_uid = nil
}

// AddTokenIDs adds the "tokens" edge to the Token entity by ids.
func (m *CollectionMutation) AddTokenIDs(ids ...int) {
	if m.tokens == nil {
		m.tokens = make(map[int]struct{})
	}
	for i := range ids {
		m.tokens[ids[i]] = struct{}{}
	}
}

// ClearTokens clears the "tokens" edge to the Token entity.
func (m *CollectionMutation) ClearTokens() {
	m.clearedtokens = true
}

// TokensCleared reports if the "tokens" edge to the Token entity was cleared.
func (m *CollectionMutation) TokensCleared() bool {
	return m.clearedtokens
}

// RemoveTokenIDs removes the "tokens" edge to the Token entity by IDs.
func (m *CollectionMutation) RemoveTokenIDs(ids ...int) {
	if m.removedtokens == nil {
		m.removedtokens = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tokens, ids[i])
		m.removedtokens[ids[i]] = struct{}{}
	}
}

// RemovedTokens returns the removed IDs of the "tokens" edge to the Token entity.
func (m *CollectionMutation) RemovedTokensIDs() (ids []int) {
	for id := range m.removedtokens {
		ids = append(ids, id)
	}
	return
}

// TokensIDs returns the "tokens" edge IDs in the mutation.
func (m *CollectionMutation) TokensIDs() (ids []int) {
	for id := range m.tokens {
		ids = append(ids, id)
	}
	return
}

// ResetTokens resets all changes to the "tokens" edge.
func (m *CollectionMutation) ResetTokens() {
	m.tokens = nil
	m.clearedtokens = false
	m.removedtokens = nil
}

// Where appends a list predicates to the CollectionMutation builder.
func (m *CollectionMutation) Where(ps ...predicate.Collection) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CollectionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CollectionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Collection, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CollectionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CollectionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Collection).
func (m *CollectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CollectionMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.created_at != nil {
		fields = append(fields, collection.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, collection.FieldUpdatedAt)
	}
	if m.tick != nil {
		fields = append(fields, collection.FieldTick)
	}
	if m.p != nil {
		fields = append(fields, collection.FieldP)
	}
	if m.max != nil {
		fields = append(fields, collection.FieldMax)
	}
	if m.supply != nil {
		fields = append(fields, collection.FieldSupply)
	}
	if m.base_uri != nil {
		fields = append(fields, collection.FieldBaseURI)
	}
	if m.name != nil {
		fields = append(fields, collection.FieldName)
	}
	if m.description != nil {
		fields = append(fields, collection.FieldDescription)
	}
	if m.image != nil {
		fields = append(fields, collection.FieldImage)
	}
	if m.attributes != nil {
		fields = append(fields, collection.FieldAttributes)
	}
	if m.tx_hash != nil {
		fields = append(fields, collection.FieldTxHash)
	}
	if m.block_height != nil {
		fields = append(fields, collection.FieldBlockHeight)
	}
	if m.block_time != nil {
		fields = append(fields, collection.FieldBlockTime)
	}
	if m.address != nil {
		fields = append(fields, collection.FieldAddress)
	}
	if m.inscription_id != nil {
		fields = append(fields, collection.FieldInscriptionID)
	}
	if m.inscription_uid != nil {
		fields = append(fields, collection.FieldInscriptionUID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CollectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case collection.FieldCreatedAt:
		return m.CreatedAt()
	case collection.FieldUpdatedAt:
		return m.UpdatedAt()
	case collection.FieldTick:
		return m.Tick()
	case collection.FieldP:
		return m.P()
	case collection.FieldMax:
		return m.Max()
	case collection.FieldSupply:
		return m.Supply()
	case collection.FieldBaseURI:
		return m.BaseURI()
	case collection.FieldName:
		return m.Name()
	case collection.FieldDescription:
		return m.Description()
	case collection.FieldImage:
		return m.Image()
	case collection.FieldAttributes:
		return m.Attributes()
	case collection.FieldTxHash:
		return m.TxHash()
	case collection.FieldBlockHeight:
		return m.BlockHeight()
	case collection.FieldBlockTime:
		return m.BlockTime()
	case collection.FieldAddress:
		return m.Address()
	case collection.FieldInscriptionID:
		return m.InscriptionID()
	case collection.FieldInscriptionUID:
		return m.InscriptionUID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CollectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case collection.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case collection.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case collection.FieldTick:
		return m.OldTick(ctx)
	case collection.FieldP:
		return m.OldP(ctx)
	case collection.FieldMax:
		return m.OldMax(ctx)
	case collection.FieldSupply:
		return m.OldSupply(ctx)
	case collection.FieldBaseURI:
		return m.OldBaseURI(ctx)
	case collection.FieldName:
		return m.OldName(ctx)
	case collection.FieldDescription:
		return m.OldDescription(ctx)
	case collection.FieldImage:
		return m.OldImage(ctx)
	case collection.FieldAttributes:
		return m.OldAttributes(ctx)
	case collection.FieldTxHash:
		return m.OldTxHash(ctx)
	case collection.FieldBlockHeight:
		return m.OldBlockHeight(ctx)
	case collection.FieldBlockTime:
		return m.OldBlockTime(ctx)
	case collection.FieldAddress:
		return m.OldAddress(ctx)
	case collection.FieldInscriptionID:
		return m.OldInscriptionID(ctx)
	case collection.FieldInscriptionUID:
		return m.OldInscriptionUID(ctx)
	}
	return nil, fmt.Errorf("unknown Collection field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CollectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case collection.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case collection.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case collection.FieldTick:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTick(v)
		return nil
	case collection.FieldP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetP(v)
		return nil
	case collection.FieldMax:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMax(v)
		return nil
	case collection.FieldSupply:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSupply(v)
		return nil
	case collection.FieldBaseURI:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBaseURI(v)
		return nil
	case collection.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case collection.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case collection.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case collection.FieldAttributes:
		v, ok := value.([]map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttributes(v)
		return nil
	case collection.FieldTxHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxHash(v)
		return nil
	case collection.FieldBlockHeight:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockHeight(v)
		return nil
	case collection.FieldBlockTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockTime(v)
		return nil
	case collection.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case collection.FieldInscriptionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInscriptionID(v)
		return nil
	case collection.FieldInscriptionUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInscriptionUID(v)
		return nil
	}
	return fmt.Errorf("unknown Collection field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CollectionMutation) AddedFields() []string {
	var fields []string
	if m.addmax != nil {
		fields = append(fields, collection.FieldMax)
	}
	if m.addsupply != nil {
		fields = append(fields, collection.FieldSupply)
	}
	if m.addblock_height != nil {
		fields = append(fields, collection.FieldBlockHeight)
	}
	if m.addinscription_id != nil {
		fields = append(fields, collection.FieldInscriptionID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CollectionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case collection.FieldMax:
		return m.AddedMax()
	case collection.FieldSupply:
		return m.AddedSupply()
	case collection.FieldBlockHeight:
		return m.AddedBlockHeight()
	case collection.FieldInscriptionID:
		return m.AddedInscriptionID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CollectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case collection.FieldMax:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMax(v)
		return nil
	case collection.FieldSupply:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSupply(v)
		return nil
	case collection.FieldBlockHeight:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBlockHeight(v)
		return nil
	case collection.FieldInscriptionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInscriptionID(v)
		return nil
	}
	return fmt.Errorf("unknown Collection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CollectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CollectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CollectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Collection nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CollectionMutation) ResetField(name string) error {
	switch name {
	case collection.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case collection.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case collection.FieldTick:
		m.ResetTick()
		return nil
	case collection.FieldP:
		m.ResetP()
		return nil
	case collection.FieldMax:
		m.ResetMax()
		return nil
	case collection.FieldSupply:
		m.ResetSupply()
		return nil
	case collection.FieldBaseURI:
		m.ResetBaseURI()
		return nil
	case collection.FieldName:
		m.ResetName()
		return nil
	case collection.FieldDescription:
		m.ResetDescription()
		return nil
	case collection.FieldImage:
		m.ResetImage()
		return nil
	case collection.FieldAttributes:
		m.ResetAttributes()
		return nil
	case collection.FieldTxHash:
		m.ResetTxHash()
		return nil
	case collection.FieldBlockHeight:
		m.ResetBlockHeight()
		return nil
	case collection.FieldBlockTime:
		m.ResetBlockTime()
		return nil
	case collection.FieldAddress:
		m.ResetAddress()
		return nil
	case collection.FieldInscriptionID:
		m.ResetInscriptionID()
		return nil
	case collection.FieldInscriptionUID:
		m.ResetInscriptionUID()
		return nil
	}
	return fmt.Errorf("unknown Collection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CollectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.tokens != nil {
		edges = append(edges, collection.EdgeTokens)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CollectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case collection.EdgeTokens:
		ids := make([]ent.Value, 0, len(m.tokens))
		for id := range m.tokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CollectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtokens != nil {
		edges = append(edges, collection.EdgeTokens)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CollectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case collection.EdgeTokens:
		ids := make([]ent.Value, 0, len(m.removedtokens))
		for id := range m.removedtokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CollectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtokens {
		edges = append(edges, collection.EdgeTokens)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CollectionMutation) EdgeCleared(name string) bool {
	switch name {
	case collection.EdgeTokens:
		return m.clearedtokens
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CollectionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Collection unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CollectionMutation) ResetEdge(name string) error {
	switch name {
	case collection.EdgeTokens:
		m.ResetTokens()
		return nil
	}
	return fmt.Errorf("unknown Collection edge %s", name)
}

// InscriptionMutation represents an operation that mutates the Inscription nodes in the graph.
type InscriptionMutation struct {
	config
	op                Op
	typ               string
	id                *int
	created_at        *time.Time
	updated_at        *time.Time
	inscription_id    *int64
	addinscription_id *int64
	uid               *string
	address           *string
	output_value      *uint64
	addoutput_value   *int64
	content_length    *uint64
	addcontent_length *int64
	content_type      *string
	timestamp         *time.Time
	genesis_height    *uint64
	addgenesis_height *int64
	genesis_fee       *uint64
	addgenesis_fee    *int64
	genesis_tx        *string
	location          *string
	output            *string
	_offset           *uint64
	add_offset        *int64
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Inscription, error)
	predicates        []predicate.Inscription
}

var _ ent.Mutation = (*InscriptionMutation)(nil)

// inscriptionOption allows management of the mutation configuration using functional options.
type inscriptionOption func(*InscriptionMutation)

// newInscriptionMutation creates new mutation for the Inscription entity.
func newInscriptionMutation(c config, op Op, opts ...inscriptionOption) *InscriptionMutation {
	m := &InscriptionMutation{
		config:        c,
		op:            op,
		typ:           TypeInscription,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInscriptionID sets the ID field of the mutation.
func withInscriptionID(id int) inscriptionOption {
	return func(m *InscriptionMutation) {
		var (
			err   error
			once  sync.Once
			value *Inscription
		)
		m.oldValue = func(ctx context.Context) (*Inscription, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Inscription.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInscription sets the old Inscription of the mutation.
func withInscription(node *Inscription) inscriptionOption {
	return func(m *InscriptionMutation) {
		m.oldValue = func(context.Context) (*Inscription, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InscriptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InscriptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InscriptionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InscriptionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Inscription.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *InscriptionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *InscriptionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Inscription entity.
// If the Inscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InscriptionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *InscriptionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *InscriptionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *InscriptionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Inscription entity.
// If the Inscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InscriptionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *InscriptionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetInscriptionID sets the "inscription_id" field.
func (m *InscriptionMutation) SetInscriptionID(i int64) {
	m.inscription_id = &i
	m.addinscription_id = nil
}

// InscriptionID returns the value of the "inscription_id" field in the mutation.
func (m *InscriptionMutation) InscriptionID() (r int64, exists bool) {
	v := m.inscription_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInscriptionID returns the old "inscription_id" field's value of the Inscription entity.
// If the Inscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InscriptionMutation) OldInscriptionID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInscriptionID: %w", err)
	}
	return oldValue.InscriptionID, nil
}

// AddInscriptionID adds i to the "inscription_id" field.
func (m *InscriptionMutation) AddInscriptionID(i int64) {
	if m.addinscription_id != nil {
		*m.addinscription_id += i
	} else {
		m.addinscription_id = &i
	}
}

// AddedInscriptionID returns the value that was added to the "inscription_id" field in this mutation.
func (m *InscriptionMutation) AddedInscriptionID() (r int64, exists bool) {
	v := m.addinscription_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetInscriptionID resets all changes to the "inscription_id" field.
func (m *InscriptionMutation) ResetInscriptionID() {
	m.inscription_id = nil
	m.addinscription_id = nil
}

// SetUID sets the "uid" field.
func (m *InscriptionMutation) SetUID(s string) {
	m.uid = &s
}

// UID returns the value of the "uid" field in the mutation.
func (m *InscriptionMutation) UID() (r string, exists bool) {
	v := m.uid
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the Inscription entity.
// If the Inscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InscriptionMutation) OldUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// ResetUID resets all changes to the "uid" field.
func (m *InscriptionMutation) ResetUID() {
	m.uid = nil
}

// SetAddress sets the "address" field.
func (m *InscriptionMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *InscriptionMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Inscription entity.
// If the Inscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InscriptionMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *InscriptionMutation) ResetAddress() {
	m.address = nil
}

// SetOutputValue sets the "output_value" field.
func (m *InscriptionMutation) SetOutputValue(u uint64) {
	m.output_value = &u
	m.addoutput_value = nil
}

// OutputValue returns the value of the "output_value" field in the mutation.
func (m *InscriptionMutation) OutputValue() (r uint64, exists bool) {
	v := m.output_value
	if v == nil {
		return
	}
	return *v, true
}

// OldOutputValue returns the old "output_value" field's value of the Inscription entity.
// If the Inscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InscriptionMutation) OldOutputValue(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutputValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutputValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutputValue: %w", err)
	}
	return oldValue.OutputValue, nil
}

// AddOutputValue adds u to the "output_value" field.
func (m *InscriptionMutation) AddOutputValue(u int64) {
	if m.addoutput_value != nil {
		*m.addoutput_value += u
	} else {
		m.addoutput_value = &u
	}
}

// AddedOutputValue returns the value that was added to the "output_value" field in this mutation.
func (m *InscriptionMutation) AddedOutputValue() (r int64, exists bool) {
	v := m.addoutput_value
	if v == nil {
		return
	}
	return *v, true
}

// ResetOutputValue resets all changes to the "output_value" field.
func (m *InscriptionMutation) ResetOutputValue() {
	m.output_value = nil
	m.addoutput_value = nil
}

// SetContentLength sets the "content_length" field.
func (m *InscriptionMutation) SetContentLength(u uint64) {
	m.content_length = &u
	m.addcontent_length = nil
}

// ContentLength returns the value of the "content_length" field in the mutation.
func (m *InscriptionMutation) ContentLength() (r uint64, exists bool) {
	v := m.content_length
	if v == nil {
		return
	}
	return *v, true
}

// OldContentLength returns the old "content_length" field's value of the Inscription entity.
// If the Inscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InscriptionMutation) OldContentLength(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentLength is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentLength requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentLength: %w", err)
	}
	return oldValue.ContentLength, nil
}

// AddContentLength adds u to the "content_length" field.
func (m *InscriptionMutation) AddContentLength(u int64) {
	if m.addcontent_length != nil {
		*m.addcontent_length += u
	} else {
		m.addcontent_length = &u
	}
}

// AddedContentLength returns the value that was added to the "content_length" field in this mutation.
func (m *InscriptionMutation) AddedContentLength() (r int64, exists bool) {
	v := m.addcontent_length
	if v == nil {
		return
	}
	return *v, true
}

// ResetContentLength resets all changes to the "content_length" field.
func (m *InscriptionMutation) ResetContentLength() {
	m.content_length = nil
	m.addcontent_length = nil
}

// SetContentType sets the "content_type" field.
func (m *InscriptionMutation) SetContentType(s string) {
	m.content_type = &s
}

// ContentType returns the value of the "content_type" field in the mutation.
func (m *InscriptionMutation) ContentType() (r string, exists bool) {
	v := m.content_type
	if v == nil {
		return
	}
	return *v, true
}

// OldContentType returns the old "content_type" field's value of the Inscription entity.
// If the Inscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InscriptionMutation) OldContentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentType: %w", err)
	}
	return oldValue.ContentType, nil
}

// ResetContentType resets all changes to the "content_type" field.
func (m *InscriptionMutation) ResetContentType() {
	m.content_type = nil
}

// SetTimestamp sets the "timestamp" field.
func (m *InscriptionMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *InscriptionMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the Inscription entity.
// If the Inscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InscriptionMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *InscriptionMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetGenesisHeight sets the "genesis_height" field.
func (m *InscriptionMutation) SetGenesisHeight(u uint64) {
	m.genesis_height = &u
	m.addgenesis_height = nil
}

// GenesisHeight returns the value of the "genesis_height" field in the mutation.
func (m *InscriptionMutation) GenesisHeight() (r uint64, exists bool) {
	v := m.genesis_height
	if v == nil {
		return
	}
	return *v, true
}

// OldGenesisHeight returns the old "genesis_height" field's value of the Inscription entity.
// If the Inscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InscriptionMutation) OldGenesisHeight(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGenesisHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGenesisHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenesisHeight: %w", err)
	}
	return oldValue.GenesisHeight, nil
}

// AddGenesisHeight adds u to the "genesis_height" field.
func (m *InscriptionMutation) AddGenesisHeight(u int64) {
	if m.addgenesis_height != nil {
		*m.addgenesis_height += u
	} else {
		m.addgenesis_height = &u
	}
}

// AddedGenesisHeight returns the value that was added to the "genesis_height" field in this mutation.
func (m *InscriptionMutation) AddedGenesisHeight() (r int64, exists bool) {
	v := m.addgenesis_height
	if v == nil {
		return
	}
	return *v, true
}

// ResetGenesisHeight resets all changes to the "genesis_height" field.
func (m *InscriptionMutation) ResetGenesisHeight() {
	m.genesis_height = nil
	m.addgenesis_height = nil
}

// SetGenesisFee sets the "genesis_fee" field.
func (m *InscriptionMutation) SetGenesisFee(u uint64) {
	m.genesis_fee = &u
	m.addgenesis_fee = nil
}

// GenesisFee returns the value of the "genesis_fee" field in the mutation.
func (m *InscriptionMutation) GenesisFee() (r uint64, exists bool) {
	v := m.genesis_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldGenesisFee returns the old "genesis_fee" field's value of the Inscription entity.
// If the Inscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InscriptionMutation) OldGenesisFee(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGenesisFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGenesisFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenesisFee: %w", err)
	}
	return oldValue.GenesisFee, nil
}

// AddGenesisFee adds u to the "genesis_fee" field.
func (m *InscriptionMutation) AddGenesisFee(u int64) {
	if m.addgenesis_fee != nil {
		*m.addgenesis_fee += u
	} else {
		m.addgenesis_fee = &u
	}
}

// AddedGenesisFee returns the value that was added to the "genesis_fee" field in this mutation.
func (m *InscriptionMutation) AddedGenesisFee() (r int64, exists bool) {
	v := m.addgenesis_fee
	if v == nil {
		return
	}
	return *v, true
}

// ResetGenesisFee resets all changes to the "genesis_fee" field.
func (m *InscriptionMutation) ResetGenesisFee() {
	m.genesis_fee = nil
	m.addgenesis_fee = nil
}

// SetGenesisTx sets the "genesis_tx" field.
func (m *InscriptionMutation) SetGenesisTx(s string) {
	m.genesis_tx = &s
}

// GenesisTx returns the value of the "genesis_tx" field in the mutation.
func (m *InscriptionMutation) GenesisTx() (r string, exists bool) {
	v := m.genesis_tx
	if v == nil {
		return
	}
	return *v, true
}

// OldGenesisTx returns the old "genesis_tx" field's value of the Inscription entity.
// If the Inscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InscriptionMutation) OldGenesisTx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGenesisTx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGenesisTx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenesisTx: %w", err)
	}
	return oldValue.GenesisTx, nil
}

// ResetGenesisTx resets all changes to the "genesis_tx" field.
func (m *InscriptionMutation) ResetGenesisTx() {
	m.genesis_tx = nil
}

// SetLocation sets the "location" field.
func (m *InscriptionMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *InscriptionMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Inscription entity.
// If the Inscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InscriptionMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *InscriptionMutation) ResetLocation() {
	m.location = nil
}

// SetOutput sets the "output" field.
func (m *InscriptionMutation) SetOutput(s string) {
	m.output = &s
}

// Output returns the value of the "output" field in the mutation.
func (m *InscriptionMutation) Output() (r string, exists bool) {
	v := m.output
	if v == nil {
		return
	}
	return *v, true
}

// OldOutput returns the old "output" field's value of the Inscription entity.
// If the Inscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InscriptionMutation) OldOutput(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutput is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutput requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutput: %w", err)
	}
	return oldValue.Output, nil
}

// ResetOutput resets all changes to the "output" field.
func (m *InscriptionMutation) ResetOutput() {
	m.output = nil
}

// SetOffset sets the "offset" field.
func (m *InscriptionMutation) SetOffset(u uint64) {
	m._offset = &u
	m.add_offset = nil
}

// Offset returns the value of the "offset" field in the mutation.
func (m *InscriptionMutation) Offset() (r uint64, exists bool) {
	v := m._offset
	if v == nil {
		return
	}
	return *v, true
}

// OldOffset returns the old "offset" field's value of the Inscription entity.
// If the Inscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InscriptionMutation) OldOffset(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOffset is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOffset requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOffset: %w", err)
	}
	return oldValue.Offset, nil
}

// AddOffset adds u to the "offset" field.
func (m *InscriptionMutation) AddOffset(u int64) {
	if m.add_offset != nil {
		*m.add_offset += u
	} else {
		m.add_offset = &u
	}
}

// AddedOffset returns the value that was added to the "offset" field in this mutation.
func (m *InscriptionMutation) AddedOffset() (r int64, exists bool) {
	v := m.add_offset
	if v == nil {
		return
	}
	return *v, true
}

// ResetOffset resets all changes to the "offset" field.
func (m *InscriptionMutation) ResetOffset() {
	m._offset = nil
	m.add_offset = nil
}

// Where appends a list predicates to the InscriptionMutation builder.
func (m *InscriptionMutation) Where(ps ...predicate.Inscription) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InscriptionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InscriptionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Inscription, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InscriptionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InscriptionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Inscription).
func (m *InscriptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InscriptionMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, inscription.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, inscription.FieldUpdatedAt)
	}
	if m.inscription_id != nil {
		fields = append(fields, inscription.FieldInscriptionID)
	}
	if m.uid != nil {
		fields = append(fields, inscription.FieldUID)
	}
	if m.address != nil {
		fields = append(fields, inscription.FieldAddress)
	}
	if m.output_value != nil {
		fields = append(fields, inscription.FieldOutputValue)
	}
	if m.content_length != nil {
		fields = append(fields, inscription.FieldContentLength)
	}
	if m.content_type != nil {
		fields = append(fields, inscription.FieldContentType)
	}
	if m.timestamp != nil {
		fields = append(fields, inscription.FieldTimestamp)
	}
	if m.genesis_height != nil {
		fields = append(fields, inscription.FieldGenesisHeight)
	}
	if m.genesis_fee != nil {
		fields = append(fields, inscription.FieldGenesisFee)
	}
	if m.genesis_tx != nil {
		fields = append(fields, inscription.FieldGenesisTx)
	}
	if m.location != nil {
		fields = append(fields, inscription.FieldLocation)
	}
	if m.output != nil {
		fields = append(fields, inscription.FieldOutput)
	}
	if m._offset != nil {
		fields = append(fields, inscription.FieldOffset)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InscriptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case inscription.FieldCreatedAt:
		return m.CreatedAt()
	case inscription.FieldUpdatedAt:
		return m.UpdatedAt()
	case inscription.FieldInscriptionID:
		return m.InscriptionID()
	case inscription.FieldUID:
		return m.UID()
	case inscription.FieldAddress:
		return m.Address()
	case inscription.FieldOutputValue:
		return m.OutputValue()
	case inscription.FieldContentLength:
		return m.ContentLength()
	case inscription.FieldContentType:
		return m.ContentType()
	case inscription.FieldTimestamp:
		return m.Timestamp()
	case inscription.FieldGenesisHeight:
		return m.GenesisHeight()
	case inscription.FieldGenesisFee:
		return m.GenesisFee()
	case inscription.FieldGenesisTx:
		return m.GenesisTx()
	case inscription.FieldLocation:
		return m.Location()
	case inscription.FieldOutput:
		return m.Output()
	case inscription.FieldOffset:
		return m.Offset()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InscriptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case inscription.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case inscription.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case inscription.FieldInscriptionID:
		return m.OldInscriptionID(ctx)
	case inscription.FieldUID:
		return m.OldUID(ctx)
	case inscription.FieldAddress:
		return m.OldAddress(ctx)
	case inscription.FieldOutputValue:
		return m.OldOutputValue(ctx)
	case inscription.FieldContentLength:
		return m.OldContentLength(ctx)
	case inscription.FieldContentType:
		return m.OldContentType(ctx)
	case inscription.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case inscription.FieldGenesisHeight:
		return m.OldGenesisHeight(ctx)
	case inscription.FieldGenesisFee:
		return m.OldGenesisFee(ctx)
	case inscription.FieldGenesisTx:
		return m.OldGenesisTx(ctx)
	case inscription.FieldLocation:
		return m.OldLocation(ctx)
	case inscription.FieldOutput:
		return m.OldOutput(ctx)
	case inscription.FieldOffset:
		return m.OldOffset(ctx)
	}
	return nil, fmt.Errorf("unknown Inscription field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InscriptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case inscription.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case inscription.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case inscription.FieldInscriptionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInscriptionID(v)
		return nil
	case inscription.FieldUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	case inscription.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case inscription.FieldOutputValue:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutputValue(v)
		return nil
	case inscription.FieldContentLength:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentLength(v)
		return nil
	case inscription.FieldContentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentType(v)
		return nil
	case inscription.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case inscription.FieldGenesisHeight:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenesisHeight(v)
		return nil
	case inscription.FieldGenesisFee:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenesisFee(v)
		return nil
	case inscription.FieldGenesisTx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenesisTx(v)
		return nil
	case inscription.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case inscription.FieldOutput:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutput(v)
		return nil
	case inscription.FieldOffset:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOffset(v)
		return nil
	}
	return fmt.Errorf("unknown Inscription field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InscriptionMutation) AddedFields() []string {
	var fields []string
	if m.addinscription_id != nil {
		fields = append(fields, inscription.FieldInscriptionID)
	}
	if m.addoutput_value != nil {
		fields = append(fields, inscription.FieldOutputValue)
	}
	if m.addcontent_length != nil {
		fields = append(fields, inscription.FieldContentLength)
	}
	if m.addgenesis_height != nil {
		fields = append(fields, inscription.FieldGenesisHeight)
	}
	if m.addgenesis_fee != nil {
		fields = append(fields, inscription.FieldGenesisFee)
	}
	if m.add_offset != nil {
		fields = append(fields, inscription.FieldOffset)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InscriptionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case inscription.FieldInscriptionID:
		return m.AddedInscriptionID()
	case inscription.FieldOutputValue:
		return m.AddedOutputValue()
	case inscription.FieldContentLength:
		return m.AddedContentLength()
	case inscription.FieldGenesisHeight:
		return m.AddedGenesisHeight()
	case inscription.FieldGenesisFee:
		return m.AddedGenesisFee()
	case inscription.FieldOffset:
		return m.AddedOffset()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InscriptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case inscription.FieldInscriptionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInscriptionID(v)
		return nil
	case inscription.FieldOutputValue:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOutputValue(v)
		return nil
	case inscription.FieldContentLength:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddContentLength(v)
		return nil
	case inscription.FieldGenesisHeight:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGenesisHeight(v)
		return nil
	case inscription.FieldGenesisFee:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGenesisFee(v)
		return nil
	case inscription.FieldOffset:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOffset(v)
		return nil
	}
	return fmt.Errorf("unknown Inscription numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InscriptionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InscriptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InscriptionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Inscription nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InscriptionMutation) ResetField(name string) error {
	switch name {
	case inscription.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case inscription.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case inscription.FieldInscriptionID:
		m.ResetInscriptionID()
		return nil
	case inscription.FieldUID:
		m.ResetUID()
		return nil
	case inscription.FieldAddress:
		m.ResetAddress()
		return nil
	case inscription.FieldOutputValue:
		m.ResetOutputValue()
		return nil
	case inscription.FieldContentLength:
		m.ResetContentLength()
		return nil
	case inscription.FieldContentType:
		m.ResetContentType()
		return nil
	case inscription.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case inscription.FieldGenesisHeight:
		m.ResetGenesisHeight()
		return nil
	case inscription.FieldGenesisFee:
		m.ResetGenesisFee()
		return nil
	case inscription.FieldGenesisTx:
		m.ResetGenesisTx()
		return nil
	case inscription.FieldLocation:
		m.ResetLocation()
		return nil
	case inscription.FieldOutput:
		m.ResetOutput()
		return nil
	case inscription.FieldOffset:
		m.ResetOffset()
		return nil
	}
	return fmt.Errorf("unknown Inscription field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InscriptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InscriptionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InscriptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InscriptionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InscriptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InscriptionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InscriptionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Inscription unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InscriptionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Inscription edge %s", name)
}

// TokenMutation represents an operation that mutates the Token nodes in the graph.
type TokenMutation struct {
	config
	op                Op
	typ               string
	id                *int
	created_at        *time.Time
	updated_at        *time.Time
	tick              *string
	p                 *string
	token_id          *uint64
	addtoken_id       *int64
	tx_hash           *string
	block_height      *uint64
	addblock_height   *int64
	block_time        *time.Time
	address           *string
	inscription_id    *int64
	addinscription_id *int64
	inscription_uid   *string
	clearedFields     map[string]struct{}
	collection        *int
	clearedcollection bool
	done              bool
	oldValue          func(context.Context) (*Token, error)
	predicates        []predicate.Token
}

var _ ent.Mutation = (*TokenMutation)(nil)

// tokenOption allows management of the mutation configuration using functional options.
type tokenOption func(*TokenMutation)

// newTokenMutation creates new mutation for the Token entity.
func newTokenMutation(c config, op Op, opts ...tokenOption) *TokenMutation {
	m := &TokenMutation{
		config:        c,
		op:            op,
		typ:           TypeToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTokenID sets the ID field of the mutation.
func withTokenID(id int) tokenOption {
	return func(m *TokenMutation) {
		var (
			err   error
			once  sync.Once
			value *Token
		)
		m.oldValue = func(ctx context.Context) (*Token, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Token.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withToken sets the old Token of the mutation.
func withToken(node *Token) tokenOption {
	return func(m *TokenMutation) {
		m.oldValue = func(context.Context) (*Token, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TokenMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TokenMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Token.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTick sets the "tick" field.
func (m *TokenMutation) SetTick(s string) {
	m.tick = &s
}

// Tick returns the value of the "tick" field in the mutation.
func (m *TokenMutation) Tick() (r string, exists bool) {
	v := m.tick
	if v == nil {
		return
	}
	return *v, true
}

// OldTick returns the old "tick" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldTick(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTick is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTick requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTick: %w", err)
	}
	return oldValue.Tick, nil
}

// ResetTick resets all changes to the "tick" field.
func (m *TokenMutation) ResetTick() {
	m.tick = nil
}

// SetP sets the "p" field.
func (m *TokenMutation) SetP(s string) {
	m.p = &s
}

// P returns the value of the "p" field in the mutation.
func (m *TokenMutation) P() (r string, exists bool) {
	v := m.p
	if v == nil {
		return
	}
	return *v, true
}

// OldP returns the old "p" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldP: %w", err)
	}
	return oldValue.P, nil
}

// ResetP resets all changes to the "p" field.
func (m *TokenMutation) ResetP() {
	m.p = nil
}

// SetTokenID sets the "token_id" field.
func (m *TokenMutation) SetTokenID(u uint64) {
	m.token_id = &u
	m.addtoken_id = nil
}

// TokenID returns the value of the "token_id" field in the mutation.
func (m *TokenMutation) TokenID() (r uint64, exists bool) {
	v := m.token_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenID returns the old "token_id" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldTokenID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenID: %w", err)
	}
	return oldValue.TokenID, nil
}

// AddTokenID adds u to the "token_id" field.
func (m *TokenMutation) AddTokenID(u int64) {
	if m.addtoken_id != nil {
		*m.addtoken_id += u
	} else {
		m.addtoken_id = &u
	}
}

// AddedTokenID returns the value that was added to the "token_id" field in this mutation.
func (m *TokenMutation) AddedTokenID() (r int64, exists bool) {
	v := m.addtoken_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTokenID resets all changes to the "token_id" field.
func (m *TokenMutation) ResetTokenID() {
	m.token_id = nil
	m.addtoken_id = nil
}

// SetTxHash sets the "tx_hash" field.
func (m *TokenMutation) SetTxHash(s string) {
	m.tx_hash = &s
}

// TxHash returns the value of the "tx_hash" field in the mutation.
func (m *TokenMutation) TxHash() (r string, exists bool) {
	v := m.tx_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTxHash returns the old "tx_hash" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldTxHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxHash: %w", err)
	}
	return oldValue.TxHash, nil
}

// ResetTxHash resets all changes to the "tx_hash" field.
func (m *TokenMutation) ResetTxHash() {
	m.tx_hash = nil
}

// SetBlockHeight sets the "block_height" field.
func (m *TokenMutation) SetBlockHeight(u uint64) {
	m.block_height = &u
	m.addblock_height = nil
}

// BlockHeight returns the value of the "block_height" field in the mutation.
func (m *TokenMutation) BlockHeight() (r uint64, exists bool) {
	v := m.block_height
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockHeight returns the old "block_height" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldBlockHeight(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlockHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlockHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockHeight: %w", err)
	}
	return oldValue.BlockHeight, nil
}

// AddBlockHeight adds u to the "block_height" field.
func (m *TokenMutation) AddBlockHeight(u int64) {
	if m.addblock_height != nil {
		*m.addblock_height += u
	} else {
		m.addblock_height = &u
	}
}

// AddedBlockHeight returns the value that was added to the "block_height" field in this mutation.
func (m *TokenMutation) AddedBlockHeight() (r int64, exists bool) {
	v := m.addblock_height
	if v == nil {
		return
	}
	return *v, true
}

// ResetBlockHeight resets all changes to the "block_height" field.
func (m *TokenMutation) ResetBlockHeight() {
	m.block_height = nil
	m.addblock_height = nil
}

// SetBlockTime sets the "block_time" field.
func (m *TokenMutation) SetBlockTime(t time.Time) {
	m.block_time = &t
}

// BlockTime returns the value of the "block_time" field in the mutation.
func (m *TokenMutation) BlockTime() (r time.Time, exists bool) {
	v := m.block_time
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockTime returns the old "block_time" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldBlockTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlockTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlockTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockTime: %w", err)
	}
	return oldValue.BlockTime, nil
}

// ResetBlockTime resets all changes to the "block_time" field.
func (m *TokenMutation) ResetBlockTime() {
	m.block_time = nil
}

// SetAddress sets the "address" field.
func (m *TokenMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *TokenMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *TokenMutation) ResetAddress() {
	m.address = nil
}

// SetInscriptionID sets the "inscription_id" field.
func (m *TokenMutation) SetInscriptionID(i int64) {
	m.inscription_id = &i
	m.addinscription_id = nil
}

// InscriptionID returns the value of the "inscription_id" field in the mutation.
func (m *TokenMutation) InscriptionID() (r int64, exists bool) {
	v := m.inscription_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInscriptionID returns the old "inscription_id" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldInscriptionID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInscriptionID: %w", err)
	}
	return oldValue.InscriptionID, nil
}

// AddInscriptionID adds i to the "inscription_id" field.
func (m *TokenMutation) AddInscriptionID(i int64) {
	if m.addinscription_id != nil {
		*m.addinscription_id += i
	} else {
		m.addinscription_id = &i
	}
}

// AddedInscriptionID returns the value that was added to the "inscription_id" field in this mutation.
func (m *TokenMutation) AddedInscriptionID() (r int64, exists bool) {
	v := m.addinscription_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetInscriptionID resets all changes to the "inscription_id" field.
func (m *TokenMutation) ResetInscriptionID() {
	m.inscription_id = nil
	m.addinscription_id = nil
}

// SetInscriptionUID sets the "inscription_uid" field.
func (m *TokenMutation) SetInscriptionUID(s string) {
	m.inscription_uid = &s
}

// InscriptionUID returns the value of the "inscription_uid" field in the mutation.
func (m *TokenMutation) InscriptionUID() (r string, exists bool) {
	v := m.inscription_uid
	if v == nil {
		return
	}
	return *v, true
}

// OldInscriptionUID returns the old "inscription_uid" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldInscriptionUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInscriptionUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInscriptionUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInscriptionUID: %w", err)
	}
	return oldValue.InscriptionUID, nil
}

// ResetInscriptionUID resets all changes to the "inscription_uid" field.
func (m *TokenMutation) ResetInscriptionUID() {
	m.inscription_uid = nil
}

// SetCollectionID sets the "collection" edge to the Collection entity by id.
func (m *TokenMutation) SetCollectionID(id int) {
	m.collection = &id
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (m *TokenMutation) ClearCollection() {
	m.clearedcollection = true
}

// CollectionCleared reports if the "collection" edge to the Collection entity was cleared.
func (m *TokenMutation) CollectionCleared() bool {
	return m.clearedcollection
}

// CollectionID returns the "collection" edge ID in the mutation.
func (m *TokenMutation) CollectionID() (id int, exists bool) {
	if m.collection != nil {
		return *m.collection, true
	}
	return
}

// CollectionIDs returns the "collection" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CollectionID instead. It exists only for internal usage by the builders.
func (m *TokenMutation) CollectionIDs() (ids []int) {
	if id := m.collection; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCollection resets all changes to the "collection" edge.
func (m *TokenMutation) ResetCollection() {
	m.collection = nil
	m.clearedcollection = false
}

// Where appends a list predicates to the TokenMutation builder.
func (m *TokenMutation) Where(ps ...predicate.Token) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Token, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Token).
func (m *TokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TokenMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, token.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, token.FieldUpdatedAt)
	}
	if m.tick != nil {
		fields = append(fields, token.FieldTick)
	}
	if m.p != nil {
		fields = append(fields, token.FieldP)
	}
	if m.token_id != nil {
		fields = append(fields, token.FieldTokenID)
	}
	if m.tx_hash != nil {
		fields = append(fields, token.FieldTxHash)
	}
	if m.block_height != nil {
		fields = append(fields, token.FieldBlockHeight)
	}
	if m.block_time != nil {
		fields = append(fields, token.FieldBlockTime)
	}
	if m.address != nil {
		fields = append(fields, token.FieldAddress)
	}
	if m.inscription_id != nil {
		fields = append(fields, token.FieldInscriptionID)
	}
	if m.inscription_uid != nil {
		fields = append(fields, token.FieldInscriptionUID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case token.FieldCreatedAt:
		return m.CreatedAt()
	case token.FieldUpdatedAt:
		return m.UpdatedAt()
	case token.FieldTick:
		return m.Tick()
	case token.FieldP:
		return m.P()
	case token.FieldTokenID:
		return m.TokenID()
	case token.FieldTxHash:
		return m.TxHash()
	case token.FieldBlockHeight:
		return m.BlockHeight()
	case token.FieldBlockTime:
		return m.BlockTime()
	case token.FieldAddress:
		return m.Address()
	case token.FieldInscriptionID:
		return m.InscriptionID()
	case token.FieldInscriptionUID:
		return m.InscriptionUID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case token.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case token.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case token.FieldTick:
		return m.OldTick(ctx)
	case token.FieldP:
		return m.OldP(ctx)
	case token.FieldTokenID:
		return m.OldTokenID(ctx)
	case token.FieldTxHash:
		return m.OldTxHash(ctx)
	case token.FieldBlockHeight:
		return m.OldBlockHeight(ctx)
	case token.FieldBlockTime:
		return m.OldBlockTime(ctx)
	case token.FieldAddress:
		return m.OldAddress(ctx)
	case token.FieldInscriptionID:
		return m.OldInscriptionID(ctx)
	case token.FieldInscriptionUID:
		return m.OldInscriptionUID(ctx)
	}
	return nil, fmt.Errorf("unknown Token field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case token.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case token.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case token.FieldTick:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTick(v)
		return nil
	case token.FieldP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetP(v)
		return nil
	case token.FieldTokenID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenID(v)
		return nil
	case token.FieldTxHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxHash(v)
		return nil
	case token.FieldBlockHeight:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockHeight(v)
		return nil
	case token.FieldBlockTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockTime(v)
		return nil
	case token.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case token.FieldInscriptionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInscriptionID(v)
		return nil
	case token.FieldInscriptionUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInscriptionUID(v)
		return nil
	}
	return fmt.Errorf("unknown Token field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TokenMutation) AddedFields() []string {
	var fields []string
	if m.addtoken_id != nil {
		fields = append(fields, token.FieldTokenID)
	}
	if m.addblock_height != nil {
		fields = append(fields, token.FieldBlockHeight)
	}
	if m.addinscription_id != nil {
		fields = append(fields, token.FieldInscriptionID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TokenMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case token.FieldTokenID:
		return m.AddedTokenID()
	case token.FieldBlockHeight:
		return m.AddedBlockHeight()
	case token.FieldInscriptionID:
		return m.AddedInscriptionID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	case token.FieldTokenID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTokenID(v)
		return nil
	case token.FieldBlockHeight:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBlockHeight(v)
		return nil
	case token.FieldInscriptionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInscriptionID(v)
		return nil
	}
	return fmt.Errorf("unknown Token numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Token nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TokenMutation) ResetField(name string) error {
	switch name {
	case token.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case token.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case token.FieldTick:
		m.ResetTick()
		return nil
	case token.FieldP:
		m.ResetP()
		return nil
	case token.FieldTokenID:
		m.ResetTokenID()
		return nil
	case token.FieldTxHash:
		m.ResetTxHash()
		return nil
	case token.FieldBlockHeight:
		m.ResetBlockHeight()
		return nil
	case token.FieldBlockTime:
		m.ResetBlockTime()
		return nil
	case token.FieldAddress:
		m.ResetAddress()
		return nil
	case token.FieldInscriptionID:
		m.ResetInscriptionID()
		return nil
	case token.FieldInscriptionUID:
		m.ResetInscriptionUID()
		return nil
	}
	return fmt.Errorf("unknown Token field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.collection != nil {
		edges = append(edges, token.EdgeCollection)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case token.EdgeCollection:
		if id := m.collection; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcollection {
		edges = append(edges, token.EdgeCollection)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TokenMutation) EdgeCleared(name string) bool {
	switch name {
	case token.EdgeCollection:
		return m.clearedcollection
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TokenMutation) ClearEdge(name string) error {
	switch name {
	case token.EdgeCollection:
		m.ClearCollection()
		return nil
	}
	return fmt.Errorf("unknown Token unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TokenMutation) ResetEdge(name string) error {
	switch name {
	case token.EdgeCollection:
		m.ResetCollection()
		return nil
	}
	return fmt.Errorf("unknown Token edge %s", name)
}
