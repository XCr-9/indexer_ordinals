// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/adshao/ordinals-indexer/internal/data/ent/collection"
	"github.com/adshao/ordinals-indexer/internal/data/ent/token"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CollectionCreate is the builder for creating a Collection entity.
type CollectionCreate struct {
	config
	mutation *CollectionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CollectionCreate) SetCreatedAt(t time.Time) *CollectionCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CollectionCreate) SetNillableCreatedAt(t *time.Time) *CollectionCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CollectionCreate) SetUpdatedAt(t time.Time) *CollectionCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CollectionCreate) SetNillableUpdatedAt(t *time.Time) *CollectionCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetTick sets the "tick" field.
func (cc *CollectionCreate) SetTick(s string) *CollectionCreate {
	cc.mutation.SetTick(s)
	return cc
}

// SetP sets the "p" field.
func (cc *CollectionCreate) SetP(s string) *CollectionCreate {
	cc.mutation.SetP(s)
	return cc
}

// SetNillableP sets the "p" field if the given value is not nil.
func (cc *CollectionCreate) SetNillableP(s *string) *CollectionCreate {
	if s != nil {
		cc.SetP(*s)
	}
	return cc
}

// SetMax sets the "max" field.
func (cc *CollectionCreate) SetMax(u uint64) *CollectionCreate {
	cc.mutation.SetMax(u)
	return cc
}

// SetSupply sets the "supply" field.
func (cc *CollectionCreate) SetSupply(u uint64) *CollectionCreate {
	cc.mutation.SetSupply(u)
	return cc
}

// SetBaseURI sets the "base_uri" field.
func (cc *CollectionCreate) SetBaseURI(s string) *CollectionCreate {
	cc.mutation.SetBaseURI(s)
	return cc
}

// SetName sets the "name" field.
func (cc *CollectionCreate) SetName(s string) *CollectionCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *CollectionCreate) SetDescription(s string) *CollectionCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetImage sets the "image" field.
func (cc *CollectionCreate) SetImage(s string) *CollectionCreate {
	cc.mutation.SetImage(s)
	return cc
}

// SetAttributes sets the "attributes" field.
func (cc *CollectionCreate) SetAttributes(m []map[string]interface{}) *CollectionCreate {
	cc.mutation.SetAttributes(m)
	return cc
}

// SetTxHash sets the "tx_hash" field.
func (cc *CollectionCreate) SetTxHash(s string) *CollectionCreate {
	cc.mutation.SetTxHash(s)
	return cc
}

// SetBlockHeight sets the "block_height" field.
func (cc *CollectionCreate) SetBlockHeight(u uint64) *CollectionCreate {
	cc.mutation.SetBlockHeight(u)
	return cc
}

// SetBlockTime sets the "block_time" field.
func (cc *CollectionCreate) SetBlockTime(t time.Time) *CollectionCreate {
	cc.mutation.SetBlockTime(t)
	return cc
}

// SetAddress sets the "address" field.
func (cc *CollectionCreate) SetAddress(s string) *CollectionCreate {
	cc.mutation.SetAddress(s)
	return cc
}

// SetInscriptionID sets the "inscription_id" field.
func (cc *CollectionCreate) SetInscriptionID(i int64) *CollectionCreate {
	cc.mutation.SetInscriptionID(i)
	return cc
}

// SetInscriptionUID sets the "inscription_uid" field.
func (cc *CollectionCreate) SetInscriptionUID(s string) *CollectionCreate {
	cc.mutation.SetInscriptionUID(s)
	return cc
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (cc *CollectionCreate) AddTokenIDs(ids ...int) *CollectionCreate {
	cc.mutation.AddTokenIDs(ids...)
	return cc
}

// AddTokens adds the "tokens" edges to the Token entity.
func (cc *CollectionCreate) AddTokens(t ...*Token) *CollectionCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddTokenIDs(ids...)
}

// Mutation returns the CollectionMutation object of the builder.
func (cc *CollectionCreate) Mutation() *CollectionMutation {
	return cc.mutation
}

// Save creates the Collection in the database.
func (cc *CollectionCreate) Save(ctx context.Context) (*Collection, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CollectionCreate) SaveX(ctx context.Context) *Collection {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CollectionCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CollectionCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CollectionCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := collection.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := collection.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.P(); !ok {
		v := collection.DefaultP
		cc.mutation.SetP(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CollectionCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Collection.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Collection.updated_at"`)}
	}
	if _, ok := cc.mutation.Tick(); !ok {
		return &ValidationError{Name: "tick", err: errors.New(`ent: missing required field "Collection.tick"`)}
	}
	if _, ok := cc.mutation.P(); !ok {
		return &ValidationError{Name: "p", err: errors.New(`ent: missing required field "Collection.p"`)}
	}
	if _, ok := cc.mutation.Max(); !ok {
		return &ValidationError{Name: "max", err: errors.New(`ent: missing required field "Collection.max"`)}
	}
	if _, ok := cc.mutation.Supply(); !ok {
		return &ValidationError{Name: "supply", err: errors.New(`ent: missing required field "Collection.supply"`)}
	}
	if _, ok := cc.mutation.BaseURI(); !ok {
		return &ValidationError{Name: "base_uri", err: errors.New(`ent: missing required field "Collection.base_uri"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Collection.name"`)}
	}
	if _, ok := cc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Collection.description"`)}
	}
	if _, ok := cc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Collection.image"`)}
	}
	if _, ok := cc.mutation.Attributes(); !ok {
		return &ValidationError{Name: "attributes", err: errors.New(`ent: missing required field "Collection.attributes"`)}
	}
	if _, ok := cc.mutation.TxHash(); !ok {
		return &ValidationError{Name: "tx_hash", err: errors.New(`ent: missing required field "Collection.tx_hash"`)}
	}
	if _, ok := cc.mutation.BlockHeight(); !ok {
		return &ValidationError{Name: "block_height", err: errors.New(`ent: missing required field "Collection.block_height"`)}
	}
	if _, ok := cc.mutation.BlockTime(); !ok {
		return &ValidationError{Name: "block_time", err: errors.New(`ent: missing required field "Collection.block_time"`)}
	}
	if _, ok := cc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Collection.address"`)}
	}
	if _, ok := cc.mutation.InscriptionID(); !ok {
		return &ValidationError{Name: "inscription_id", err: errors.New(`ent: missing required field "Collection.inscription_id"`)}
	}
	if _, ok := cc.mutation.InscriptionUID(); !ok {
		return &ValidationError{Name: "inscription_uid", err: errors.New(`ent: missing required field "Collection.inscription_uid"`)}
	}
	return nil
}

func (cc *CollectionCreate) sqlSave(ctx context.Context) (*Collection, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CollectionCreate) createSpec() (*Collection, *sqlgraph.CreateSpec) {
	var (
		_node = &Collection{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(collection.Table, sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(collection.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(collection.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Tick(); ok {
		_spec.SetField(collection.FieldTick, field.TypeString, value)
		_node.Tick = value
	}
	if value, ok := cc.mutation.P(); ok {
		_spec.SetField(collection.FieldP, field.TypeString, value)
		_node.P = value
	}
	if value, ok := cc.mutation.Max(); ok {
		_spec.SetField(collection.FieldMax, field.TypeUint64, value)
		_node.Max = value
	}
	if value, ok := cc.mutation.Supply(); ok {
		_spec.SetField(collection.FieldSupply, field.TypeUint64, value)
		_node.Supply = value
	}
	if value, ok := cc.mutation.BaseURI(); ok {
		_spec.SetField(collection.FieldBaseURI, field.TypeString, value)
		_node.BaseURI = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(collection.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(collection.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.Image(); ok {
		_spec.SetField(collection.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := cc.mutation.Attributes(); ok {
		_spec.SetField(collection.FieldAttributes, field.TypeJSON, value)
		_node.Attributes = value
	}
	if value, ok := cc.mutation.TxHash(); ok {
		_spec.SetField(collection.FieldTxHash, field.TypeString, value)
		_node.TxHash = value
	}
	if value, ok := cc.mutation.BlockHeight(); ok {
		_spec.SetField(collection.FieldBlockHeight, field.TypeUint64, value)
		_node.BlockHeight = value
	}
	if value, ok := cc.mutation.BlockTime(); ok {
		_spec.SetField(collection.FieldBlockTime, field.TypeTime, value)
		_node.BlockTime = value
	}
	if value, ok := cc.mutation.Address(); ok {
		_spec.SetField(collection.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := cc.mutation.InscriptionID(); ok {
		_spec.SetField(collection.FieldInscriptionID, field.TypeInt64, value)
		_node.InscriptionID = value
	}
	if value, ok := cc.mutation.InscriptionUID(); ok {
		_spec.SetField(collection.FieldInscriptionUID, field.TypeString, value)
		_node.InscriptionUID = value
	}
	if nodes := cc.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collection.TokensTable,
			Columns: []string{collection.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Collection.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CollectionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CollectionCreate) OnConflict(opts ...sql.ConflictOption) *CollectionUpsertOne {
	cc.conflict = opts
	return &CollectionUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Collection.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CollectionCreate) OnConflictColumns(columns ...string) *CollectionUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CollectionUpsertOne{
		create: cc,
	}
}

type (
	// CollectionUpsertOne is the builder for "upsert"-ing
	//  one Collection node.
	CollectionUpsertOne struct {
		create *CollectionCreate
	}

	// CollectionUpsert is the "OnConflict" setter.
	CollectionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CollectionUpsert) SetUpdatedAt(v time.Time) *CollectionUpsert {
	u.Set(collection.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateUpdatedAt() *CollectionUpsert {
	u.SetExcluded(collection.FieldUpdatedAt)
	return u
}

// SetTick sets the "tick" field.
func (u *CollectionUpsert) SetTick(v string) *CollectionUpsert {
	u.Set(collection.FieldTick, v)
	return u
}

// UpdateTick sets the "tick" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateTick() *CollectionUpsert {
	u.SetExcluded(collection.FieldTick)
	return u
}

// SetP sets the "p" field.
func (u *CollectionUpsert) SetP(v string) *CollectionUpsert {
	u.Set(collection.FieldP, v)
	return u
}

// UpdateP sets the "p" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateP() *CollectionUpsert {
	u.SetExcluded(collection.FieldP)
	return u
}

// SetMax sets the "max" field.
func (u *CollectionUpsert) SetMax(v uint64) *CollectionUpsert {
	u.Set(collection.FieldMax, v)
	return u
}

// UpdateMax sets the "max" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateMax() *CollectionUpsert {
	u.SetExcluded(collection.FieldMax)
	return u
}

// AddMax adds v to the "max" field.
func (u *CollectionUpsert) AddMax(v uint64) *CollectionUpsert {
	u.Add(collection.FieldMax, v)
	return u
}

// SetSupply sets the "supply" field.
func (u *CollectionUpsert) SetSupply(v uint64) *CollectionUpsert {
	u.Set(collection.FieldSupply, v)
	return u
}

// UpdateSupply sets the "supply" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateSupply() *CollectionUpsert {
	u.SetExcluded(collection.FieldSupply)
	return u
}

// AddSupply adds v to the "supply" field.
func (u *CollectionUpsert) AddSupply(v uint64) *CollectionUpsert {
	u.Add(collection.FieldSupply, v)
	return u
}

// SetBaseURI sets the "base_uri" field.
func (u *CollectionUpsert) SetBaseURI(v string) *CollectionUpsert {
	u.Set(collection.FieldBaseURI, v)
	return u
}

// UpdateBaseURI sets the "base_uri" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateBaseURI() *CollectionUpsert {
	u.SetExcluded(collection.FieldBaseURI)
	return u
}

// SetName sets the "name" field.
func (u *CollectionUpsert) SetName(v string) *CollectionUpsert {
	u.Set(collection.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateName() *CollectionUpsert {
	u.SetExcluded(collection.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *CollectionUpsert) SetDescription(v string) *CollectionUpsert {
	u.Set(collection.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateDescription() *CollectionUpsert {
	u.SetExcluded(collection.FieldDescription)
	return u
}

// SetImage sets the "image" field.
func (u *CollectionUpsert) SetImage(v string) *CollectionUpsert {
	u.Set(collection.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateImage() *CollectionUpsert {
	u.SetExcluded(collection.FieldImage)
	return u
}

// SetAttributes sets the "attributes" field.
func (u *CollectionUpsert) SetAttributes(v []map[string]interface{}) *CollectionUpsert {
	u.Set(collection.FieldAttributes, v)
	return u
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateAttributes() *CollectionUpsert {
	u.SetExcluded(collection.FieldAttributes)
	return u
}

// SetTxHash sets the "tx_hash" field.
func (u *CollectionUpsert) SetTxHash(v string) *CollectionUpsert {
	u.Set(collection.FieldTxHash, v)
	return u
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateTxHash() *CollectionUpsert {
	u.SetExcluded(collection.FieldTxHash)
	return u
}

// SetBlockHeight sets the "block_height" field.
func (u *CollectionUpsert) SetBlockHeight(v uint64) *CollectionUpsert {
	u.Set(collection.FieldBlockHeight, v)
	return u
}

// UpdateBlockHeight sets the "block_height" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateBlockHeight() *CollectionUpsert {
	u.SetExcluded(collection.FieldBlockHeight)
	return u
}

// AddBlockHeight adds v to the "block_height" field.
func (u *CollectionUpsert) AddBlockHeight(v uint64) *CollectionUpsert {
	u.Add(collection.FieldBlockHeight, v)
	return u
}

// SetBlockTime sets the "block_time" field.
func (u *CollectionUpsert) SetBlockTime(v time.Time) *CollectionUpsert {
	u.Set(collection.FieldBlockTime, v)
	return u
}

// UpdateBlockTime sets the "block_time" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateBlockTime() *CollectionUpsert {
	u.SetExcluded(collection.FieldBlockTime)
	return u
}

// SetAddress sets the "address" field.
func (u *CollectionUpsert) SetAddress(v string) *CollectionUpsert {
	u.Set(collection.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateAddress() *CollectionUpsert {
	u.SetExcluded(collection.FieldAddress)
	return u
}

// SetInscriptionID sets the "inscription_id" field.
func (u *CollectionUpsert) SetInscriptionID(v int64) *CollectionUpsert {
	u.Set(collection.FieldInscriptionID, v)
	return u
}

// UpdateInscriptionID sets the "inscription_id" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateInscriptionID() *CollectionUpsert {
	u.SetExcluded(collection.FieldInscriptionID)
	return u
}

// AddInscriptionID adds v to the "inscription_id" field.
func (u *CollectionUpsert) AddInscriptionID(v int64) *CollectionUpsert {
	u.Add(collection.FieldInscriptionID, v)
	return u
}

// SetInscriptionUID sets the "inscription_uid" field.
func (u *CollectionUpsert) SetInscriptionUID(v string) *CollectionUpsert {
	u.Set(collection.FieldInscriptionUID, v)
	return u
}

// UpdateInscriptionUID sets the "inscription_uid" field to the value that was provided on create.
func (u *CollectionUpsert) UpdateInscriptionUID() *CollectionUpsert {
	u.SetExcluded(collection.FieldInscriptionUID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Collection.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CollectionUpsertOne) UpdateNewValues() *CollectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(collection.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Collection.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CollectionUpsertOne) Ignore() *CollectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CollectionUpsertOne) DoNothing() *CollectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CollectionCreate.OnConflict
// documentation for more info.
func (u *CollectionUpsertOne) Update(set func(*CollectionUpsert)) *CollectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CollectionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CollectionUpsertOne) SetUpdatedAt(v time.Time) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateUpdatedAt() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTick sets the "tick" field.
func (u *CollectionUpsertOne) SetTick(v string) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetTick(v)
	})
}

// UpdateTick sets the "tick" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateTick() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateTick()
	})
}

// SetP sets the "p" field.
func (u *CollectionUpsertOne) SetP(v string) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetP(v)
	})
}

// UpdateP sets the "p" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateP() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateP()
	})
}

// SetMax sets the "max" field.
func (u *CollectionUpsertOne) SetMax(v uint64) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetMax(v)
	})
}

// AddMax adds v to the "max" field.
func (u *CollectionUpsertOne) AddMax(v uint64) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.AddMax(v)
	})
}

// UpdateMax sets the "max" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateMax() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateMax()
	})
}

// SetSupply sets the "supply" field.
func (u *CollectionUpsertOne) SetSupply(v uint64) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetSupply(v)
	})
}

// AddSupply adds v to the "supply" field.
func (u *CollectionUpsertOne) AddSupply(v uint64) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.AddSupply(v)
	})
}

// UpdateSupply sets the "supply" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateSupply() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateSupply()
	})
}

// SetBaseURI sets the "base_uri" field.
func (u *CollectionUpsertOne) SetBaseURI(v string) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetBaseURI(v)
	})
}

// UpdateBaseURI sets the "base_uri" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateBaseURI() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateBaseURI()
	})
}

// SetName sets the "name" field.
func (u *CollectionUpsertOne) SetName(v string) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateName() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *CollectionUpsertOne) SetDescription(v string) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateDescription() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateDescription()
	})
}

// SetImage sets the "image" field.
func (u *CollectionUpsertOne) SetImage(v string) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateImage() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateImage()
	})
}

// SetAttributes sets the "attributes" field.
func (u *CollectionUpsertOne) SetAttributes(v []map[string]interface{}) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateAttributes() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateAttributes()
	})
}

// SetTxHash sets the "tx_hash" field.
func (u *CollectionUpsertOne) SetTxHash(v string) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateTxHash() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateTxHash()
	})
}

// SetBlockHeight sets the "block_height" field.
func (u *CollectionUpsertOne) SetBlockHeight(v uint64) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetBlockHeight(v)
	})
}

// AddBlockHeight adds v to the "block_height" field.
func (u *CollectionUpsertOne) AddBlockHeight(v uint64) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.AddBlockHeight(v)
	})
}

// UpdateBlockHeight sets the "block_height" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateBlockHeight() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateBlockHeight()
	})
}

// SetBlockTime sets the "block_time" field.
func (u *CollectionUpsertOne) SetBlockTime(v time.Time) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetBlockTime(v)
	})
}

// UpdateBlockTime sets the "block_time" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateBlockTime() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateBlockTime()
	})
}

// SetAddress sets the "address" field.
func (u *CollectionUpsertOne) SetAddress(v string) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateAddress() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateAddress()
	})
}

// SetInscriptionID sets the "inscription_id" field.
func (u *CollectionUpsertOne) SetInscriptionID(v int64) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetInscriptionID(v)
	})
}

// AddInscriptionID adds v to the "inscription_id" field.
func (u *CollectionUpsertOne) AddInscriptionID(v int64) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.AddInscriptionID(v)
	})
}

// UpdateInscriptionID sets the "inscription_id" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateInscriptionID() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateInscriptionID()
	})
}

// SetInscriptionUID sets the "inscription_uid" field.
func (u *CollectionUpsertOne) SetInscriptionUID(v string) *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.SetInscriptionUID(v)
	})
}

// UpdateInscriptionUID sets the "inscription_uid" field to the value that was provided on create.
func (u *CollectionUpsertOne) UpdateInscriptionUID() *CollectionUpsertOne {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateInscriptionUID()
	})
}

// Exec executes the query.
func (u *CollectionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CollectionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CollectionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CollectionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CollectionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CollectionCreateBulk is the builder for creating many Collection entities in bulk.
type CollectionCreateBulk struct {
	config
	builders []*CollectionCreate
	conflict []sql.ConflictOption
}

// Save creates the Collection entities in the database.
func (ccb *CollectionCreateBulk) Save(ctx context.Context) ([]*Collection, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Collection, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CollectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CollectionCreateBulk) SaveX(ctx context.Context) []*Collection {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CollectionCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CollectionCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Collection.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CollectionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CollectionCreateBulk) OnConflict(opts ...sql.ConflictOption) *CollectionUpsertBulk {
	ccb.conflict = opts
	return &CollectionUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Collection.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CollectionCreateBulk) OnConflictColumns(columns ...string) *CollectionUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CollectionUpsertBulk{
		create: ccb,
	}
}

// CollectionUpsertBulk is the builder for "upsert"-ing
// a bulk of Collection nodes.
type CollectionUpsertBulk struct {
	create *CollectionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Collection.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CollectionUpsertBulk) UpdateNewValues() *CollectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(collection.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Collection.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CollectionUpsertBulk) Ignore() *CollectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CollectionUpsertBulk) DoNothing() *CollectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CollectionCreateBulk.OnConflict
// documentation for more info.
func (u *CollectionUpsertBulk) Update(set func(*CollectionUpsert)) *CollectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CollectionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CollectionUpsertBulk) SetUpdatedAt(v time.Time) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateUpdatedAt() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTick sets the "tick" field.
func (u *CollectionUpsertBulk) SetTick(v string) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetTick(v)
	})
}

// UpdateTick sets the "tick" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateTick() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateTick()
	})
}

// SetP sets the "p" field.
func (u *CollectionUpsertBulk) SetP(v string) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetP(v)
	})
}

// UpdateP sets the "p" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateP() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateP()
	})
}

// SetMax sets the "max" field.
func (u *CollectionUpsertBulk) SetMax(v uint64) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetMax(v)
	})
}

// AddMax adds v to the "max" field.
func (u *CollectionUpsertBulk) AddMax(v uint64) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.AddMax(v)
	})
}

// UpdateMax sets the "max" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateMax() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateMax()
	})
}

// SetSupply sets the "supply" field.
func (u *CollectionUpsertBulk) SetSupply(v uint64) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetSupply(v)
	})
}

// AddSupply adds v to the "supply" field.
func (u *CollectionUpsertBulk) AddSupply(v uint64) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.AddSupply(v)
	})
}

// UpdateSupply sets the "supply" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateSupply() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateSupply()
	})
}

// SetBaseURI sets the "base_uri" field.
func (u *CollectionUpsertBulk) SetBaseURI(v string) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetBaseURI(v)
	})
}

// UpdateBaseURI sets the "base_uri" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateBaseURI() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateBaseURI()
	})
}

// SetName sets the "name" field.
func (u *CollectionUpsertBulk) SetName(v string) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateName() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *CollectionUpsertBulk) SetDescription(v string) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateDescription() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateDescription()
	})
}

// SetImage sets the "image" field.
func (u *CollectionUpsertBulk) SetImage(v string) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateImage() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateImage()
	})
}

// SetAttributes sets the "attributes" field.
func (u *CollectionUpsertBulk) SetAttributes(v []map[string]interface{}) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateAttributes() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateAttributes()
	})
}

// SetTxHash sets the "tx_hash" field.
func (u *CollectionUpsertBulk) SetTxHash(v string) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateTxHash() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateTxHash()
	})
}

// SetBlockHeight sets the "block_height" field.
func (u *CollectionUpsertBulk) SetBlockHeight(v uint64) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetBlockHeight(v)
	})
}

// AddBlockHeight adds v to the "block_height" field.
func (u *CollectionUpsertBulk) AddBlockHeight(v uint64) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.AddBlockHeight(v)
	})
}

// UpdateBlockHeight sets the "block_height" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateBlockHeight() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateBlockHeight()
	})
}

// SetBlockTime sets the "block_time" field.
func (u *CollectionUpsertBulk) SetBlockTime(v time.Time) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetBlockTime(v)
	})
}

// UpdateBlockTime sets the "block_time" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateBlockTime() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateBlockTime()
	})
}

// SetAddress sets the "address" field.
func (u *CollectionUpsertBulk) SetAddress(v string) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateAddress() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateAddress()
	})
}

// SetInscriptionID sets the "inscription_id" field.
func (u *CollectionUpsertBulk) SetInscriptionID(v int64) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetInscriptionID(v)
	})
}

// AddInscriptionID adds v to the "inscription_id" field.
func (u *CollectionUpsertBulk) AddInscriptionID(v int64) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.AddInscriptionID(v)
	})
}

// UpdateInscriptionID sets the "inscription_id" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateInscriptionID() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateInscriptionID()
	})
}

// SetInscriptionUID sets the "inscription_uid" field.
func (u *CollectionUpsertBulk) SetInscriptionUID(v string) *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.SetInscriptionUID(v)
	})
}

// UpdateInscriptionUID sets the "inscription_uid" field to the value that was provided on create.
func (u *CollectionUpsertBulk) UpdateInscriptionUID() *CollectionUpsertBulk {
	return u.Update(func(s *CollectionUpsert) {
		s.UpdateInscriptionUID()
	})
}

// Exec executes the query.
func (u *CollectionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CollectionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CollectionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CollectionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
