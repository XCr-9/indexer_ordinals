// Code generated by ent, DO NOT EDIT.

package token

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the token type in the database.
	Label = "token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTick holds the string denoting the tick field in the database.
	FieldTick = "tick"
	// FieldP holds the string denoting the p field in the database.
	FieldP = "p"
	// FieldTokenID holds the string denoting the token_id field in the database.
	FieldTokenID = "token_id"
	// FieldTxHash holds the string denoting the tx_hash field in the database.
	FieldTxHash = "tx_hash"
	// FieldBlockHeight holds the string denoting the block_height field in the database.
	FieldBlockHeight = "block_height"
	// FieldBlockTime holds the string denoting the block_time field in the database.
	FieldBlockTime = "block_time"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldInscriptionID holds the string denoting the inscription_id field in the database.
	FieldInscriptionID = "inscription_id"
	// FieldInscriptionUID holds the string denoting the inscription_uid field in the database.
	FieldInscriptionUID = "inscription_uid"
	// EdgeCollection holds the string denoting the collection edge name in mutations.
	EdgeCollection = "collection"
	// Table holds the table name of the token in the database.
	Table = "tokens"
	// CollectionTable is the table that holds the collection relation/edge.
	CollectionTable = "tokens"
	// CollectionInverseTable is the table name for the Collection entity.
	// It exists in this package in order to avoid circular dependency with the "collection" package.
	CollectionInverseTable = "collections"
	// CollectionColumn is the table column denoting the collection relation/edge.
	CollectionColumn = "collection_tokens"
)

// Columns holds all SQL columns for token fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTick,
	FieldP,
	FieldTokenID,
	FieldTxHash,
	FieldBlockHeight,
	FieldBlockTime,
	FieldAddress,
	FieldInscriptionID,
	FieldInscriptionUID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tokens"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"collection_tokens",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultP holds the default value on creation for the "p" field.
	DefaultP string
)

// OrderOption defines the ordering options for the Token queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTick orders the results by the tick field.
func ByTick(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTick, opts...).ToFunc()
}

// ByP orders the results by the p field.
func ByP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldP, opts...).ToFunc()
}

// ByTokenID orders the results by the token_id field.
func ByTokenID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenID, opts...).ToFunc()
}

// ByTxHash orders the results by the tx_hash field.
func ByTxHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxHash, opts...).ToFunc()
}

// ByBlockHeight orders the results by the block_height field.
func ByBlockHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockHeight, opts...).ToFunc()
}

// ByBlockTime orders the results by the block_time field.
func ByBlockTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockTime, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByInscriptionID orders the results by the inscription_id field.
func ByInscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInscriptionID, opts...).ToFunc()
}

// ByInscriptionUID orders the results by the inscription_uid field.
func ByInscriptionUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInscriptionUID, opts...).ToFunc()
}

// ByCollectionField orders the results by collection field.
func ByCollectionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCollectionStep(), sql.OrderByField(field, opts...))
	}
}
func newCollectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CollectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CollectionTable, CollectionColumn),
	)
}
