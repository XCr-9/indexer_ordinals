// Code generated by ent, DO NOT EDIT.

package token

import (
	"github.com/adshao/ordinals-indexer/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldUpdatedAt, v))
}

// Tick applies equality check predicate on the "tick" field. It's identical to TickEQ.
func Tick(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldTick, v))
}

// P applies equality check predicate on the "p" field. It's identical to PEQ.
func P(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldP, v))
}

// TokenID applies equality check predicate on the "token_id" field. It's identical to TokenIDEQ.
func TokenID(v uint64) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldTokenID, v))
}

// TxHash applies equality check predicate on the "tx_hash" field. It's identical to TxHashEQ.
func TxHash(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldTxHash, v))
}

// BlockHeight applies equality check predicate on the "block_height" field. It's identical to BlockHeightEQ.
func BlockHeight(v uint64) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldBlockHeight, v))
}

// BlockTime applies equality check predicate on the "block_time" field. It's identical to BlockTimeEQ.
func BlockTime(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldBlockTime, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldAddress, v))
}

// InscriptionID applies equality check predicate on the "inscription_id" field. It's identical to InscriptionIDEQ.
func InscriptionID(v int64) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldInscriptionID, v))
}

// InscriptionUID applies equality check predicate on the "inscription_uid" field. It's identical to InscriptionUIDEQ.
func InscriptionUID(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldInscriptionUID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldUpdatedAt, v))
}

// TickEQ applies the EQ predicate on the "tick" field.
func TickEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldTick, v))
}

// TickNEQ applies the NEQ predicate on the "tick" field.
func TickNEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldTick, v))
}

// TickIn applies the In predicate on the "tick" field.
func TickIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldTick, vs...))
}

// TickNotIn applies the NotIn predicate on the "tick" field.
func TickNotIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldTick, vs...))
}

// TickGT applies the GT predicate on the "tick" field.
func TickGT(v string) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldTick, v))
}

// TickGTE applies the GTE predicate on the "tick" field.
func TickGTE(v string) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldTick, v))
}

// TickLT applies the LT predicate on the "tick" field.
func TickLT(v string) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldTick, v))
}

// TickLTE applies the LTE predicate on the "tick" field.
func TickLTE(v string) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldTick, v))
}

// TickContains applies the Contains predicate on the "tick" field.
func TickContains(v string) predicate.Token {
	return predicate.Token(sql.FieldContains(FieldTick, v))
}

// TickHasPrefix applies the HasPrefix predicate on the "tick" field.
func TickHasPrefix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasPrefix(FieldTick, v))
}

// TickHasSuffix applies the HasSuffix predicate on the "tick" field.
func TickHasSuffix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasSuffix(FieldTick, v))
}

// TickEqualFold applies the EqualFold predicate on the "tick" field.
func TickEqualFold(v string) predicate.Token {
	return predicate.Token(sql.FieldEqualFold(FieldTick, v))
}

// TickContainsFold applies the ContainsFold predicate on the "tick" field.
func TickContainsFold(v string) predicate.Token {
	return predicate.Token(sql.FieldContainsFold(FieldTick, v))
}

// PEQ applies the EQ predicate on the "p" field.
func PEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldP, v))
}

// PNEQ applies the NEQ predicate on the "p" field.
func PNEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldP, v))
}

// PIn applies the In predicate on the "p" field.
func PIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldP, vs...))
}

// PNotIn applies the NotIn predicate on the "p" field.
func PNotIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldP, vs...))
}

// PGT applies the GT predicate on the "p" field.
func PGT(v string) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldP, v))
}

// PGTE applies the GTE predicate on the "p" field.
func PGTE(v string) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldP, v))
}

// PLT applies the LT predicate on the "p" field.
func PLT(v string) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldP, v))
}

// PLTE applies the LTE predicate on the "p" field.
func PLTE(v string) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldP, v))
}

// PContains applies the Contains predicate on the "p" field.
func PContains(v string) predicate.Token {
	return predicate.Token(sql.FieldContains(FieldP, v))
}

// PHasPrefix applies the HasPrefix predicate on the "p" field.
func PHasPrefix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasPrefix(FieldP, v))
}

// PHasSuffix applies the HasSuffix predicate on the "p" field.
func PHasSuffix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasSuffix(FieldP, v))
}

// PEqualFold applies the EqualFold predicate on the "p" field.
func PEqualFold(v string) predicate.Token {
	return predicate.Token(sql.FieldEqualFold(FieldP, v))
}

// PContainsFold applies the ContainsFold predicate on the "p" field.
func PContainsFold(v string) predicate.Token {
	return predicate.Token(sql.FieldContainsFold(FieldP, v))
}

// TokenIDEQ applies the EQ predicate on the "token_id" field.
func TokenIDEQ(v uint64) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldTokenID, v))
}

// TokenIDNEQ applies the NEQ predicate on the "token_id" field.
func TokenIDNEQ(v uint64) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldTokenID, v))
}

// TokenIDIn applies the In predicate on the "token_id" field.
func TokenIDIn(vs ...uint64) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldTokenID, vs...))
}

// TokenIDNotIn applies the NotIn predicate on the "token_id" field.
func TokenIDNotIn(vs ...uint64) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldTokenID, vs...))
}

// TokenIDGT applies the GT predicate on the "token_id" field.
func TokenIDGT(v uint64) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldTokenID, v))
}

// TokenIDGTE applies the GTE predicate on the "token_id" field.
func TokenIDGTE(v uint64) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldTokenID, v))
}

// TokenIDLT applies the LT predicate on the "token_id" field.
func TokenIDLT(v uint64) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldTokenID, v))
}

// TokenIDLTE applies the LTE predicate on the "token_id" field.
func TokenIDLTE(v uint64) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldTokenID, v))
}

// TxHashEQ applies the EQ predicate on the "tx_hash" field.
func TxHashEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldTxHash, v))
}

// TxHashNEQ applies the NEQ predicate on the "tx_hash" field.
func TxHashNEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldTxHash, v))
}

// TxHashIn applies the In predicate on the "tx_hash" field.
func TxHashIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldTxHash, vs...))
}

// TxHashNotIn applies the NotIn predicate on the "tx_hash" field.
func TxHashNotIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldTxHash, vs...))
}

// TxHashGT applies the GT predicate on the "tx_hash" field.
func TxHashGT(v string) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldTxHash, v))
}

// TxHashGTE applies the GTE predicate on the "tx_hash" field.
func TxHashGTE(v string) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldTxHash, v))
}

// TxHashLT applies the LT predicate on the "tx_hash" field.
func TxHashLT(v string) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldTxHash, v))
}

// TxHashLTE applies the LTE predicate on the "tx_hash" field.
func TxHashLTE(v string) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldTxHash, v))
}

// TxHashContains applies the Contains predicate on the "tx_hash" field.
func TxHashContains(v string) predicate.Token {
	return predicate.Token(sql.FieldContains(FieldTxHash, v))
}

// TxHashHasPrefix applies the HasPrefix predicate on the "tx_hash" field.
func TxHashHasPrefix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasPrefix(FieldTxHash, v))
}

// TxHashHasSuffix applies the HasSuffix predicate on the "tx_hash" field.
func TxHashHasSuffix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasSuffix(FieldTxHash, v))
}

// TxHashEqualFold applies the EqualFold predicate on the "tx_hash" field.
func TxHashEqualFold(v string) predicate.Token {
	return predicate.Token(sql.FieldEqualFold(FieldTxHash, v))
}

// TxHashContainsFold applies the ContainsFold predicate on the "tx_hash" field.
func TxHashContainsFold(v string) predicate.Token {
	return predicate.Token(sql.FieldContainsFold(FieldTxHash, v))
}

// BlockHeightEQ applies the EQ predicate on the "block_height" field.
func BlockHeightEQ(v uint64) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldBlockHeight, v))
}

// BlockHeightNEQ applies the NEQ predicate on the "block_height" field.
func BlockHeightNEQ(v uint64) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldBlockHeight, v))
}

// BlockHeightIn applies the In predicate on the "block_height" field.
func BlockHeightIn(vs ...uint64) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldBlockHeight, vs...))
}

// BlockHeightNotIn applies the NotIn predicate on the "block_height" field.
func BlockHeightNotIn(vs ...uint64) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldBlockHeight, vs...))
}

// BlockHeightGT applies the GT predicate on the "block_height" field.
func BlockHeightGT(v uint64) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldBlockHeight, v))
}

// BlockHeightGTE applies the GTE predicate on the "block_height" field.
func BlockHeightGTE(v uint64) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldBlockHeight, v))
}

// BlockHeightLT applies the LT predicate on the "block_height" field.
func BlockHeightLT(v uint64) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldBlockHeight, v))
}

// BlockHeightLTE applies the LTE predicate on the "block_height" field.
func BlockHeightLTE(v uint64) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldBlockHeight, v))
}

// BlockTimeEQ applies the EQ predicate on the "block_time" field.
func BlockTimeEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldBlockTime, v))
}

// BlockTimeNEQ applies the NEQ predicate on the "block_time" field.
func BlockTimeNEQ(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldBlockTime, v))
}

// BlockTimeIn applies the In predicate on the "block_time" field.
func BlockTimeIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldBlockTime, vs...))
}

// BlockTimeNotIn applies the NotIn predicate on the "block_time" field.
func BlockTimeNotIn(vs ...time.Time) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldBlockTime, vs...))
}

// BlockTimeGT applies the GT predicate on the "block_time" field.
func BlockTimeGT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldBlockTime, v))
}

// BlockTimeGTE applies the GTE predicate on the "block_time" field.
func BlockTimeGTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldBlockTime, v))
}

// BlockTimeLT applies the LT predicate on the "block_time" field.
func BlockTimeLT(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldBlockTime, v))
}

// BlockTimeLTE applies the LTE predicate on the "block_time" field.
func BlockTimeLTE(v time.Time) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldBlockTime, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Token {
	return predicate.Token(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Token {
	return predicate.Token(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Token {
	return predicate.Token(sql.FieldContainsFold(FieldAddress, v))
}

// InscriptionIDEQ applies the EQ predicate on the "inscription_id" field.
func InscriptionIDEQ(v int64) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldInscriptionID, v))
}

// InscriptionIDNEQ applies the NEQ predicate on the "inscription_id" field.
func InscriptionIDNEQ(v int64) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldInscriptionID, v))
}

// InscriptionIDIn applies the In predicate on the "inscription_id" field.
func InscriptionIDIn(vs ...int64) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldInscriptionID, vs...))
}

// InscriptionIDNotIn applies the NotIn predicate on the "inscription_id" field.
func InscriptionIDNotIn(vs ...int64) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldInscriptionID, vs...))
}

// InscriptionIDGT applies the GT predicate on the "inscription_id" field.
func InscriptionIDGT(v int64) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldInscriptionID, v))
}

// InscriptionIDGTE applies the GTE predicate on the "inscription_id" field.
func InscriptionIDGTE(v int64) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldInscriptionID, v))
}

// InscriptionIDLT applies the LT predicate on the "inscription_id" field.
func InscriptionIDLT(v int64) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldInscriptionID, v))
}

// InscriptionIDLTE applies the LTE predicate on the "inscription_id" field.
func InscriptionIDLTE(v int64) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldInscriptionID, v))
}

// InscriptionUIDEQ applies the EQ predicate on the "inscription_uid" field.
func InscriptionUIDEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldEQ(FieldInscriptionUID, v))
}

// InscriptionUIDNEQ applies the NEQ predicate on the "inscription_uid" field.
func InscriptionUIDNEQ(v string) predicate.Token {
	return predicate.Token(sql.FieldNEQ(FieldInscriptionUID, v))
}

// InscriptionUIDIn applies the In predicate on the "inscription_uid" field.
func InscriptionUIDIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldIn(FieldInscriptionUID, vs...))
}

// InscriptionUIDNotIn applies the NotIn predicate on the "inscription_uid" field.
func InscriptionUIDNotIn(vs ...string) predicate.Token {
	return predicate.Token(sql.FieldNotIn(FieldInscriptionUID, vs...))
}

// InscriptionUIDGT applies the GT predicate on the "inscription_uid" field.
func InscriptionUIDGT(v string) predicate.Token {
	return predicate.Token(sql.FieldGT(FieldInscriptionUID, v))
}

// InscriptionUIDGTE applies the GTE predicate on the "inscription_uid" field.
func InscriptionUIDGTE(v string) predicate.Token {
	return predicate.Token(sql.FieldGTE(FieldInscriptionUID, v))
}

// InscriptionUIDLT applies the LT predicate on the "inscription_uid" field.
func InscriptionUIDLT(v string) predicate.Token {
	return predicate.Token(sql.FieldLT(FieldInscriptionUID, v))
}

// InscriptionUIDLTE applies the LTE predicate on the "inscription_uid" field.
func InscriptionUIDLTE(v string) predicate.Token {
	return predicate.Token(sql.FieldLTE(FieldInscriptionUID, v))
}

// InscriptionUIDContains applies the Contains predicate on the "inscription_uid" field.
func InscriptionUIDContains(v string) predicate.Token {
	return predicate.Token(sql.FieldContains(FieldInscriptionUID, v))
}

// InscriptionUIDHasPrefix applies the HasPrefix predicate on the "inscription_uid" field.
func InscriptionUIDHasPrefix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasPrefix(FieldInscriptionUID, v))
}

// InscriptionUIDHasSuffix applies the HasSuffix predicate on the "inscription_uid" field.
func InscriptionUIDHasSuffix(v string) predicate.Token {
	return predicate.Token(sql.FieldHasSuffix(FieldInscriptionUID, v))
}

// InscriptionUIDEqualFold applies the EqualFold predicate on the "inscription_uid" field.
func InscriptionUIDEqualFold(v string) predicate.Token {
	return predicate.Token(sql.FieldEqualFold(FieldInscriptionUID, v))
}

// InscriptionUIDContainsFold applies the ContainsFold predicate on the "inscription_uid" field.
func InscriptionUIDContainsFold(v string) predicate.Token {
	return predicate.Token(sql.FieldContainsFold(FieldInscriptionUID, v))
}

// HasCollection applies the HasEdge predicate on the "collection" edge.
func HasCollection() predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CollectionTable, CollectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCollectionWith applies the HasEdge predicate on the "collection" edge with a given conditions (other predicates).
func HasCollectionWith(preds ...predicate.Collection) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		step := newCollectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Token) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Token) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Token) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		p(s.Not())
	})
}
