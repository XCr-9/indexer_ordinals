// Code generated by ent, DO NOT EDIT.

package inscription

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the inscription type in the database.
	Label = "inscription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldInscriptionID holds the string denoting the inscription_id field in the database.
	FieldInscriptionID = "inscription_id"
	// FieldUID holds the string denoting the uid field in the database.
	FieldUID = "uid"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldOutputValue holds the string denoting the output_value field in the database.
	FieldOutputValue = "output_value"
	// FieldContentLength holds the string denoting the content_length field in the database.
	FieldContentLength = "content_length"
	// FieldContentType holds the string denoting the content_type field in the database.
	FieldContentType = "content_type"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldGenesisHeight holds the string denoting the genesis_height field in the database.
	FieldGenesisHeight = "genesis_height"
	// FieldGenesisFee holds the string denoting the genesis_fee field in the database.
	FieldGenesisFee = "genesis_fee"
	// FieldGenesisTx holds the string denoting the genesis_tx field in the database.
	FieldGenesisTx = "genesis_tx"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldOutput holds the string denoting the output field in the database.
	FieldOutput = "output"
	// FieldOffset holds the string denoting the offset field in the database.
	FieldOffset = "offset"
	// Table holds the table name of the inscription in the database.
	Table = "inscriptions"
)

// Columns holds all SQL columns for inscription fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldInscriptionID,
	FieldUID,
	FieldAddress,
	FieldOutputValue,
	FieldContentLength,
	FieldContentType,
	FieldTimestamp,
	FieldGenesisHeight,
	FieldGenesisFee,
	FieldGenesisTx,
	FieldLocation,
	FieldOutput,
	FieldOffset,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Inscription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByInscriptionID orders the results by the inscription_id field.
func ByInscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInscriptionID, opts...).ToFunc()
}

// ByUID orders the results by the uid field.
func ByUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUID, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByOutputValue orders the results by the output_value field.
func ByOutputValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutputValue, opts...).ToFunc()
}

// ByContentLength orders the results by the content_length field.
func ByContentLength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentLength, opts...).ToFunc()
}

// ByContentType orders the results by the content_type field.
func ByContentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentType, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByGenesisHeight orders the results by the genesis_height field.
func ByGenesisHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenesisHeight, opts...).ToFunc()
}

// ByGenesisFee orders the results by the genesis_fee field.
func ByGenesisFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenesisFee, opts...).ToFunc()
}

// ByGenesisTx orders the results by the genesis_tx field.
func ByGenesisTx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenesisTx, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByOutput orders the results by the output field.
func ByOutput(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutput, opts...).ToFunc()
}

// ByOffset orders the results by the offset field.
func ByOffset(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOffset, opts...).ToFunc()
}
