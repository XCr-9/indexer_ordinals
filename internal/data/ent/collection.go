// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"github.com/adshao/ordinals-indexer/internal/data/ent/collection"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Collection is the model entity for the Collection schema.
type Collection struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Tick holds the value of the "tick" field.
	Tick string `json:"tick,omitempty"`
	// P holds the value of the "p" field.
	P string `json:"p,omitempty"`
	// Max holds the value of the "max" field.
	Max uint64 `json:"max,omitempty"`
	// Supply holds the value of the "supply" field.
	Supply uint64 `json:"supply,omitempty"`
	// BaseURI holds the value of the "base_uri" field.
	BaseURI string `json:"base_uri,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Attributes holds the value of the "attributes" field.
	Attributes []map[string]interface{} `json:"attributes,omitempty"`
	// TxHash holds the value of the "tx_hash" field.
	TxHash string `json:"tx_hash,omitempty"`
	// BlockHeight holds the value of the "block_height" field.
	BlockHeight uint64 `json:"block_height,omitempty"`
	// BlockTime holds the value of the "block_time" field.
	BlockTime time.Time `json:"block_time,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// InscriptionID holds the value of the "inscription_id" field.
	InscriptionID int64 `json:"inscription_id,omitempty"`
	// InscriptionUID holds the value of the "inscription_uid" field.
	InscriptionUID string `json:"inscription_uid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CollectionQuery when eager-loading is set.
	Edges        CollectionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CollectionEdges holds the relations/edges for other nodes in the graph.
type CollectionEdges struct {
	// Tokens holds the value of the tokens edge.
	Tokens []*Token `json:"tokens,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TokensOrErr returns the Tokens value or an error if the edge
// was not loaded in eager-loading.
func (e CollectionEdges) TokensOrErr() ([]*Token, error) {
	if e.loadedTypes[0] {
		return e.Tokens, nil
	}
	return nil, &NotLoadedError{edge: "tokens"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Collection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case collection.FieldAttributes:
			values[i] = new([]byte)
		case collection.FieldID, collection.FieldMax, collection.FieldSupply, collection.FieldBlockHeight, collection.FieldInscriptionID:
			values[i] = new(sql.NullInt64)
		case collection.FieldTick, collection.FieldP, collection.FieldBaseURI, collection.FieldName, collection.FieldDescription, collection.FieldImage, collection.FieldTxHash, collection.FieldAddress, collection.FieldInscriptionUID:
			values[i] = new(sql.NullString)
		case collection.FieldCreatedAt, collection.FieldUpdatedAt, collection.FieldBlockTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Collection fields.
func (c *Collection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case collection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case collection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case collection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case collection.FieldTick:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tick", values[i])
			} else if value.Valid {
				c.Tick = value.String
			}
		case collection.FieldP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field p", values[i])
			} else if value.Valid {
				c.P = value.String
			}
		case collection.FieldMax:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max", values[i])
			} else if value.Valid {
				c.Max = uint64(value.Int64)
			}
		case collection.FieldSupply:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field supply", values[i])
			} else if value.Valid {
				c.Supply = uint64(value.Int64)
			}
		case collection.FieldBaseURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field base_uri", values[i])
			} else if value.Valid {
				c.BaseURI = value.String
			}
		case collection.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case collection.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case collection.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				c.Image = value.String
			}
		case collection.FieldAttributes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attributes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Attributes); err != nil {
					return fmt.Errorf("unmarshal field attributes: %w", err)
				}
			}
		case collection.FieldTxHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_hash", values[i])
			} else if value.Valid {
				c.TxHash = value.String
			}
		case collection.FieldBlockHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field block_height", values[i])
			} else if value.Valid {
				c.BlockHeight = uint64(value.Int64)
			}
		case collection.FieldBlockTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field block_time", values[i])
			} else if value.Valid {
				c.BlockTime = value.Time
			}
		case collection.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				c.Address = value.String
			}
		case collection.FieldInscriptionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field inscription_id", values[i])
			} else if value.Valid {
				c.InscriptionID = value.Int64
			}
		case collection.FieldInscriptionUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inscription_uid", values[i])
			} else if value.Valid {
				c.InscriptionUID = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Collection.
// This includes values selected through modifiers, order, etc.
func (c *Collection) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryTokens queries the "tokens" edge of the Collection entity.
func (c *Collection) QueryTokens() *TokenQuery {
	return NewCollectionClient(c.config).QueryTokens(c)
}

// Update returns a builder for updating this Collection.
// Note that you need to call Collection.Unwrap() before calling this method if this Collection
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Collection) Update() *CollectionUpdateOne {
	return NewCollectionClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Collection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Collection) Unwrap() *Collection {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Collection is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Collection) String() string {
	var builder strings.Builder
	builder.WriteString("Collection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tick=")
	builder.WriteString(c.Tick)
	builder.WriteString(", ")
	builder.WriteString("p=")
	builder.WriteString(c.P)
	builder.WriteString(", ")
	builder.WriteString("max=")
	builder.WriteString(fmt.Sprintf("%v", c.Max))
	builder.WriteString(", ")
	builder.WriteString("supply=")
	builder.WriteString(fmt.Sprintf("%v", c.Supply))
	builder.WriteString(", ")
	builder.WriteString("base_uri=")
	builder.WriteString(c.BaseURI)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(c.Image)
	builder.WriteString(", ")
	builder.WriteString("attributes=")
	builder.WriteString(fmt.Sprintf("%v", c.Attributes))
	builder.WriteString(", ")
	builder.WriteString("tx_hash=")
	builder.WriteString(c.TxHash)
	builder.WriteString(", ")
	builder.WriteString("block_height=")
	builder.WriteString(fmt.Sprintf("%v", c.BlockHeight))
	builder.WriteString(", ")
	builder.WriteString("block_time=")
	builder.WriteString(c.BlockTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(c.Address)
	builder.WriteString(", ")
	builder.WriteString("inscription_id=")
	builder.WriteString(fmt.Sprintf("%v", c.InscriptionID))
	builder.WriteString(", ")
	builder.WriteString("inscription_uid=")
	builder.WriteString(c.InscriptionUID)
	builder.WriteByte(')')
	return builder.String()
}

// Collections is a parsable slice of Collection.
type Collections []*Collection
